Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CIN
    CONTINUE
    COUT
    DELETE
    FALSE
    NEW
    RETURN
    TRUE
    WS

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> ID
Rule 2     primary_expression -> constant
Rule 3     primary_expression -> STRING_CONST
Rule 4     primary_expression -> ( expression )
Rule 5     constant -> INT_CONST
Rule 6     constant -> CHAR_CONST
Rule 7     constant -> STRING_CONST
Rule 8     constant -> BOOL_CONST
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> postfix_expression [ expression ]
Rule 11    postfix_expression -> postfix_expression ( )
Rule 12    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 13    postfix_expression -> postfix_expression . ID
Rule 14    postfix_expression -> postfix_expression PTR_OP ID
Rule 15    postfix_expression -> postfix_expression INC_OP
Rule 16    postfix_expression -> postfix_expression DEC_OP
Rule 17    argument_expression_list -> assignment_expression
Rule 18    argument_expression_list -> argument_expression_list , assignment_expression
Rule 19    unary_expression -> postfix_expression
Rule 20    unary_expression -> INC_OP unary_expression
Rule 21    unary_expression -> DEC_OP unary_expression
Rule 22    unary_expression -> unary_operator cast_expression
Rule 23    unary_expression -> SIZEOF unary_expression
Rule 24    unary_expression -> SIZEOF ( type_name )
Rule 25    unary_operator -> &
Rule 26    unary_operator -> *
Rule 27    unary_operator -> +
Rule 28    unary_operator -> -
Rule 29    unary_operator -> ~
Rule 30    unary_operator -> !
Rule 31    cast_expression -> unary_expression
Rule 32    cast_expression -> ( type_name ) cast_expression
Rule 33    multiplicative_expression -> cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 35    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 36    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 37    additive_expression -> multiplicative_expression
Rule 38    additive_expression -> additive_expression + multiplicative_expression
Rule 39    additive_expression -> additive_expression - multiplicative_expression
Rule 40    shift_expression -> additive_expression
Rule 41    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 42    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 43    relational_expression -> shift_expression
Rule 44    relational_expression -> relational_expression < shift_expression
Rule 45    relational_expression -> relational_expression > shift_expression
Rule 46    relational_expression -> relational_expression LE_OP shift_expression
Rule 47    relational_expression -> relational_expression GE_OP shift_expression
Rule 48    equality_expression -> relational_expression
Rule 49    equality_expression -> equality_expression EQ_OP relational_expression
Rule 50    equality_expression -> equality_expression NE_OP relational_expression
Rule 51    and_expression -> equality_expression
Rule 52    and_expression -> and_expression & equality_expression
Rule 53    exclusive_or_expression -> and_expression
Rule 54    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 55    inclusive_or_expression -> exclusive_or_expression
Rule 56    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 57    logical_and_expression -> inclusive_or_expression
Rule 58    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 59    logical_or_expression -> logical_and_expression
Rule 60    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 61    conditional_expression -> logical_or_expression
Rule 62    conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 63    assignment_expression -> conditional_expression
Rule 64    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 65    assignment_operator -> =
Rule 66    assignment_operator -> MUL_ASSIGN
Rule 67    assignment_operator -> DIV_ASSIGN
Rule 68    assignment_operator -> MOD_ASSIGN
Rule 69    assignment_operator -> ADD_ASSIGN
Rule 70    assignment_operator -> SUB_ASSIGN
Rule 71    assignment_operator -> LEFT_ASSIGN
Rule 72    assignment_operator -> RIGHT_ASSIGN
Rule 73    assignment_operator -> AND_ASSIGN
Rule 74    assignment_operator -> XOR_ASSIGN
Rule 75    assignment_operator -> OR_ASSIGN
Rule 76    expression -> assignment_expression
Rule 77    expression -> expression , assignment_expression
Rule 78    constant_expression -> conditional_expression
Rule 79    declaration -> declaration_specifiers init_declarator_list ;
Rule 80    declaration -> declaration_specifiers ;
Rule 81    declaration_specifiers -> type_specifier
Rule 82    declaration_specifiers -> type_specifier declaration_specifiers
Rule 83    init_declarator_list -> init_declarator
Rule 84    init_declarator_list -> init_declarator_list , init_declarator
Rule 85    init_declarator -> declarator
Rule 86    init_declarator -> declarator = initializer
Rule 87    type_specifier -> VOID
Rule 88    type_specifier -> BOOL
Rule 89    type_specifier -> CHAR
Rule 90    type_specifier -> INT
Rule 91    type_specifier -> struct_specifier
Rule 92    struct_specifier -> STRUCT ID { struct_declaration_list }
Rule 93    struct_specifier -> STRUCT { struct_declaration_list }
Rule 94    struct_specifier -> STRUCT ID
Rule 95    struct_declaration_list -> struct_declaration
Rule 96    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 97    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 98    struct_declaration -> specifier_qualifier_list ;
Rule 99    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 100   specifier_qualifier_list -> type_specifier
Rule 101   struct_declarator_list -> struct_declarator
Rule 102   struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 103   struct_declarator -> declarator
Rule 104   struct_declarator -> : constant_expression
Rule 105   struct_declarator -> declarator : constant_expression
Rule 106   declarator -> pointer direct_declarator
Rule 107   declarator -> direct_declarator
Rule 108   direct_declarator -> ID
Rule 109   direct_declarator -> ( declarator )
Rule 110   direct_declarator -> direct_declarator [ ]
Rule 111   direct_declarator -> direct_declarator [ constant_expression ]
Rule 112   direct_declarator -> direct_declarator ( parameter_type_list )
Rule 113   direct_declarator -> direct_declarator ( identifier_list )
Rule 114   direct_declarator -> direct_declarator ( )
Rule 115   pointer -> *
Rule 116   parameter_type_list -> parameter_list
Rule 117   parameter_list -> parameter_declaration
Rule 118   parameter_list -> parameter_list , parameter_declaration
Rule 119   parameter_declaration -> declaration_specifiers declarator
Rule 120   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 121   parameter_declaration -> declaration_specifiers
Rule 122   identifier_list -> ID
Rule 123   identifier_list -> identifier_list , ID
Rule 124   type_name -> specifier_qualifier_list abstract_declarator
Rule 125   type_name -> specifier_qualifier_list
Rule 126   abstract_declarator -> pointer
Rule 127   abstract_declarator -> direct_abstract_declarator
Rule 128   abstract_declarator -> pointer direct_abstract_declarator
Rule 129   direct_abstract_declarator -> ( abstract_declarator )
Rule 130   direct_abstract_declarator -> [ constant_expression ]
Rule 131   direct_abstract_declarator -> [ ]
Rule 132   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 133   direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]
Rule 134   direct_abstract_declarator -> ( parameter_type_list )
Rule 135   direct_abstract_declarator -> ( )
Rule 136   direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )
Rule 137   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 138   initializer -> assignment_expression
Rule 139   initializer -> { initializer_list }
Rule 140   initializer -> { initializer_list , }
Rule 141   initializer_list -> initializer
Rule 142   initializer_list -> initializer_list , initializer
Rule 143   initializer_list -> initializer_list , designation initializer
Rule 144   initializer_list -> designation initializer
Rule 145   designation -> designator_list =
Rule 146   designator_list -> designator
Rule 147   designator_list -> designator_list designator
Rule 148   designator -> [ constant_expression ]
Rule 149   designator -> . ID
Rule 150   statement -> compound_statement
Rule 151   statement -> expression_statement
Rule 152   statement -> selection_statement
Rule 153   statement -> iteration_statement
Rule 154   compound_statement -> { }
Rule 155   compound_statement -> { block_item_list }
Rule 156   block_item_list -> block_item
Rule 157   block_item_list -> block_item_list block_item
Rule 158   block_item -> declaration
Rule 159   block_item -> statement
Rule 160   expression_statement -> ;
Rule 161   expression_statement -> expression ;
Rule 162   selection_statement -> IF ( expression ) statement
Rule 163   selection_statement -> IF ( expression ) statement ELSE statement
Rule 164   iteration_statement -> WHILE ( expression ) statement
Rule 165   iteration_statement -> DO statement WHILE ( expression ) ;
Rule 166   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 167   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 168   iteration_statement -> FOR ( declaration expression_statement ) statement
Rule 169   iteration_statement -> FOR ( declaration expression_statement expression ) statement
Rule 170   translation_unit -> external_declaration
Rule 171   translation_unit -> translation_unit external_declaration
Rule 172   external_declaration -> function_definition
Rule 173   external_declaration -> declaration
Rule 174   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 175   function_definition -> declaration_specifiers declarator compound_statement
Rule 176   declaration_list -> declaration
Rule 177   declaration_list -> declaration_list declaration

Terminals, with rules where they appear

!                    : 30
%                    : 36
&                    : 25 52
(                    : 4 11 12 24 32 109 112 113 114 129 134 135 136 137 162 163 164 165 166 167 168 169
)                    : 4 11 12 24 32 109 112 113 114 129 134 135 136 137 162 163 164 165 166 167 168 169
*                    : 26 34 115
+                    : 27 38
,                    : 18 77 84 102 118 123 140 142 143
-                    : 28 39
.                    : 13 149
/                    : 35
:                    : 62 104 105
;                    : 79 80 97 98 160 161 165
<                    : 44
=                    : 65 86 145
>                    : 45
?                    : 62
ADD_ASSIGN           : 69
AND_ASSIGN           : 73
AND_OP               : 58
BOOL                 : 88
BOOL_CONST           : 8
BREAK                : 
CHAR                 : 89
CHAR_CONST           : 6
CIN                  : 
CONTINUE             : 
COUT                 : 
DEC_OP               : 16 21
DELETE               : 
DIV_ASSIGN           : 67
DO                   : 165
ELSE                 : 163
EQ_OP                : 49
FALSE                : 
FOR                  : 166 167 168 169
GE_OP                : 47
ID                   : 1 13 14 92 94 108 122 123 149
IF                   : 162 163
INC_OP               : 15 20
INT                  : 90
INT_CONST            : 5
LEFT_ASSIGN          : 71
LEFT_OP              : 41
LE_OP                : 46
MOD_ASSIGN           : 68
MUL_ASSIGN           : 66
NEW                  : 
NE_OP                : 50
OR_ASSIGN            : 75
OR_OP                : 60
PTR_OP               : 14
RETURN               : 
RIGHT_ASSIGN         : 72
RIGHT_OP             : 42
SIZEOF               : 23 24
STRING_CONST         : 3 7
STRUCT               : 92 93 94
SUB_ASSIGN           : 70
TRUE                 : 
VOID                 : 87
WHILE                : 164 165
WS                   : 
XOR_ASSIGN           : 74
[                    : 10 110 111 130 131 132 133 148
]                    : 10 110 111 130 131 132 133 148
^                    : 54
error                : 
{                    : 92 93 139 140 154 155
|                    : 56
}                    : 92 93 139 140 154 155
~                    : 29

Nonterminals, with rules where they appear

abstract_declarator  : 120 124 129
additive_expression  : 38 39 40 41 42
and_expression       : 52 53 54
argument_expression_list : 12 18
assignment_expression : 17 18 64 76 77 138
assignment_operator  : 64
block_item           : 156 157
block_item_list      : 155 157
cast_expression      : 22 32 33 34 35 36
compound_statement   : 150 174 175
conditional_expression : 62 63 78
constant             : 2
constant_expression  : 104 105 111 130 133 148
declaration          : 158 168 169 173 176 177
declaration_list     : 174 177
declaration_specifiers : 79 80 82 119 120 121 174 175
declarator           : 85 86 103 105 109 119 174 175
designation          : 143 144
designator           : 146 147
designator_list      : 145 147
direct_abstract_declarator : 127 128 132 133 136 137
direct_declarator    : 106 107 110 111 112 113 114
equality_expression  : 49 50 51 52
exclusive_or_expression : 54 55 56
expression           : 4 10 62 77 161 162 163 164 165 167 169
expression_statement : 151 166 166 167 167 168 169
external_declaration : 170 171
function_definition  : 172
identifier_list      : 113 123
inclusive_or_expression : 56 57 58
init_declarator      : 83 84
init_declarator_list : 79 84
initializer          : 86 141 142 143 144
initializer_list     : 139 140 142 143
iteration_statement  : 153
logical_and_expression : 58 59 60
logical_or_expression : 60 61 62
multiplicative_expression : 34 35 36 37 38 39
parameter_declaration : 117 118
parameter_list       : 116 118
parameter_type_list  : 112 134 136
pointer              : 106 126 128
postfix_expression   : 10 11 12 13 14 15 16 19
primary_expression   : 9
relational_expression : 44 45 46 47 48 49 50
selection_statement  : 152
shift_expression     : 41 42 43 44 45 46 47
specifier_qualifier_list : 97 98 99 124 125
statement            : 159 162 163 163 164 165 166 167 168 169
struct_declaration   : 95 96
struct_declaration_list : 92 93 96
struct_declarator    : 101 102
struct_declarator_list : 97 102
struct_specifier     : 91
translation_unit     : 171 0
type_name            : 24 32
type_specifier       : 81 82 99 100
unary_expression     : 20 21 23 31 64
unary_operator       : 22

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (170) translation_unit -> . external_declaration
    (171) translation_unit -> . translation_unit external_declaration
    (172) external_declaration -> . function_definition
    (173) external_declaration -> . declaration
    (174) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (175) function_definition -> . declaration_specifiers declarator compound_statement
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 1

    (0) S' -> translation_unit .
    (171) translation_unit -> translation_unit . external_declaration
    (172) external_declaration -> . function_definition
    (173) external_declaration -> . declaration
    (174) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (175) function_definition -> . declaration_specifiers declarator compound_statement
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    external_declaration           shift and go to state 13
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 2

    (170) translation_unit -> external_declaration .

    VOID            reduce using rule 170 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 170 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 170 (translation_unit -> external_declaration .)
    INT             reduce using rule 170 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 170 (translation_unit -> external_declaration .)
    $end            reduce using rule 170 (translation_unit -> external_declaration .)


state 3

    (172) external_declaration -> function_definition .

    VOID            reduce using rule 172 (external_declaration -> function_definition .)
    BOOL            reduce using rule 172 (external_declaration -> function_definition .)
    CHAR            reduce using rule 172 (external_declaration -> function_definition .)
    INT             reduce using rule 172 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 172 (external_declaration -> function_definition .)
    $end            reduce using rule 172 (external_declaration -> function_definition .)


state 4

    (173) external_declaration -> declaration .

    VOID            reduce using rule 173 (external_declaration -> declaration .)
    BOOL            reduce using rule 173 (external_declaration -> declaration .)
    CHAR            reduce using rule 173 (external_declaration -> declaration .)
    INT             reduce using rule 173 (external_declaration -> declaration .)
    STRUCT          reduce using rule 173 (external_declaration -> declaration .)
    $end            reduce using rule 173 (external_declaration -> declaration .)


state 5

    (174) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (175) function_definition -> declaration_specifiers . declarator compound_statement
    (79) declaration -> declaration_specifiers . init_declarator_list ;
    (80) declaration -> declaration_specifiers . ;
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list , init_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator = initializer

    ;               shift and go to state 16
    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 22

    declarator                     shift and go to state 14
    init_declarator_list           shift and go to state 15
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18
    init_declarator                shift and go to state 19

state 6

    (81) declaration_specifiers -> type_specifier .
    (82) declaration_specifiers -> type_specifier . declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    ;               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 81 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    type_specifier                 shift and go to state 6
    declaration_specifiers         shift and go to state 23
    struct_specifier               shift and go to state 11

state 7

    (87) type_specifier -> VOID .

    VOID            reduce using rule 87 (type_specifier -> VOID .)
    BOOL            reduce using rule 87 (type_specifier -> VOID .)
    CHAR            reduce using rule 87 (type_specifier -> VOID .)
    INT             reduce using rule 87 (type_specifier -> VOID .)
    STRUCT          reduce using rule 87 (type_specifier -> VOID .)
    ;               reduce using rule 87 (type_specifier -> VOID .)
    *               reduce using rule 87 (type_specifier -> VOID .)
    ID              reduce using rule 87 (type_specifier -> VOID .)
    (               reduce using rule 87 (type_specifier -> VOID .)
    [               reduce using rule 87 (type_specifier -> VOID .)
    ,               reduce using rule 87 (type_specifier -> VOID .)
    )               reduce using rule 87 (type_specifier -> VOID .)
    :               reduce using rule 87 (type_specifier -> VOID .)


state 8

    (88) type_specifier -> BOOL .

    VOID            reduce using rule 88 (type_specifier -> BOOL .)
    BOOL            reduce using rule 88 (type_specifier -> BOOL .)
    CHAR            reduce using rule 88 (type_specifier -> BOOL .)
    INT             reduce using rule 88 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 88 (type_specifier -> BOOL .)
    ;               reduce using rule 88 (type_specifier -> BOOL .)
    *               reduce using rule 88 (type_specifier -> BOOL .)
    ID              reduce using rule 88 (type_specifier -> BOOL .)
    (               reduce using rule 88 (type_specifier -> BOOL .)
    [               reduce using rule 88 (type_specifier -> BOOL .)
    ,               reduce using rule 88 (type_specifier -> BOOL .)
    )               reduce using rule 88 (type_specifier -> BOOL .)
    :               reduce using rule 88 (type_specifier -> BOOL .)


state 9

    (89) type_specifier -> CHAR .

    VOID            reduce using rule 89 (type_specifier -> CHAR .)
    BOOL            reduce using rule 89 (type_specifier -> CHAR .)
    CHAR            reduce using rule 89 (type_specifier -> CHAR .)
    INT             reduce using rule 89 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 89 (type_specifier -> CHAR .)
    ;               reduce using rule 89 (type_specifier -> CHAR .)
    *               reduce using rule 89 (type_specifier -> CHAR .)
    ID              reduce using rule 89 (type_specifier -> CHAR .)
    (               reduce using rule 89 (type_specifier -> CHAR .)
    [               reduce using rule 89 (type_specifier -> CHAR .)
    ,               reduce using rule 89 (type_specifier -> CHAR .)
    )               reduce using rule 89 (type_specifier -> CHAR .)
    :               reduce using rule 89 (type_specifier -> CHAR .)


state 10

    (90) type_specifier -> INT .

    VOID            reduce using rule 90 (type_specifier -> INT .)
    BOOL            reduce using rule 90 (type_specifier -> INT .)
    CHAR            reduce using rule 90 (type_specifier -> INT .)
    INT             reduce using rule 90 (type_specifier -> INT .)
    STRUCT          reduce using rule 90 (type_specifier -> INT .)
    ;               reduce using rule 90 (type_specifier -> INT .)
    *               reduce using rule 90 (type_specifier -> INT .)
    ID              reduce using rule 90 (type_specifier -> INT .)
    (               reduce using rule 90 (type_specifier -> INT .)
    [               reduce using rule 90 (type_specifier -> INT .)
    ,               reduce using rule 90 (type_specifier -> INT .)
    )               reduce using rule 90 (type_specifier -> INT .)
    :               reduce using rule 90 (type_specifier -> INT .)


state 11

    (91) type_specifier -> struct_specifier .

    VOID            reduce using rule 91 (type_specifier -> struct_specifier .)
    BOOL            reduce using rule 91 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 91 (type_specifier -> struct_specifier .)
    INT             reduce using rule 91 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 91 (type_specifier -> struct_specifier .)
    ;               reduce using rule 91 (type_specifier -> struct_specifier .)
    *               reduce using rule 91 (type_specifier -> struct_specifier .)
    ID              reduce using rule 91 (type_specifier -> struct_specifier .)
    (               reduce using rule 91 (type_specifier -> struct_specifier .)
    [               reduce using rule 91 (type_specifier -> struct_specifier .)
    ,               reduce using rule 91 (type_specifier -> struct_specifier .)
    )               reduce using rule 91 (type_specifier -> struct_specifier .)
    :               reduce using rule 91 (type_specifier -> struct_specifier .)


state 12

    (92) struct_specifier -> STRUCT . ID { struct_declaration_list }
    (93) struct_specifier -> STRUCT . { struct_declaration_list }
    (94) struct_specifier -> STRUCT . ID

    ID              shift and go to state 24
    {               shift and go to state 25


state 13

    (171) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 171 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 171 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 171 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 171 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 171 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 171 (translation_unit -> translation_unit external_declaration .)


state 14

    (174) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (175) function_definition -> declaration_specifiers declarator . compound_statement
    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . = initializer
    (176) declaration_list -> . declaration
    (177) declaration_list -> . declaration_list declaration
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    ;               reduce using rule 85 (init_declarator -> declarator .)
    ,               reduce using rule 85 (init_declarator -> declarator .)
    =               shift and go to state 29
    {               shift and go to state 31
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    declaration_specifiers         shift and go to state 26
    declaration_list               shift and go to state 27
    compound_statement             shift and go to state 28
    declaration                    shift and go to state 30
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 15

    (79) declaration -> declaration_specifiers init_declarator_list . ;
    (84) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 32
    ,               shift and go to state 33


state 16

    (80) declaration -> declaration_specifiers ; .

    VOID            reduce using rule 80 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 80 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 80 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 80 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 80 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 80 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 80 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 80 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 80 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 80 (declaration -> declaration_specifiers ; .)
    INC_OP          reduce using rule 80 (declaration -> declaration_specifiers ; .)
    DEC_OP          reduce using rule 80 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 80 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    ID              reduce using rule 80 (declaration -> declaration_specifiers ; .)
    STRING_CONST    reduce using rule 80 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 80 (declaration -> declaration_specifiers ; .)
    INT_CONST       reduce using rule 80 (declaration -> declaration_specifiers ; .)
    CHAR_CONST      reduce using rule 80 (declaration -> declaration_specifiers ; .)
    BOOL_CONST      reduce using rule 80 (declaration -> declaration_specifiers ; .)


state 17

    (106) declarator -> pointer . direct_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )

    ID              shift and go to state 21
    (               shift and go to state 22

    direct_declarator              shift and go to state 34

state 18

    (107) declarator -> direct_declarator .
    (110) direct_declarator -> direct_declarator . [ ]
    (111) direct_declarator -> direct_declarator . [ constant_expression ]
    (112) direct_declarator -> direct_declarator . ( parameter_type_list )
    (113) direct_declarator -> direct_declarator . ( identifier_list )
    (114) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 107 (declarator -> direct_declarator .)
    {               reduce using rule 107 (declarator -> direct_declarator .)
    VOID            reduce using rule 107 (declarator -> direct_declarator .)
    BOOL            reduce using rule 107 (declarator -> direct_declarator .)
    CHAR            reduce using rule 107 (declarator -> direct_declarator .)
    INT             reduce using rule 107 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 107 (declarator -> direct_declarator .)
    ;               reduce using rule 107 (declarator -> direct_declarator .)
    ,               reduce using rule 107 (declarator -> direct_declarator .)
    )               reduce using rule 107 (declarator -> direct_declarator .)
    :               reduce using rule 107 (declarator -> direct_declarator .)
    [               shift and go to state 35
    (               shift and go to state 36


state 19

    (83) init_declarator_list -> init_declarator .

    ;               reduce using rule 83 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 83 (init_declarator_list -> init_declarator .)


state 20

    (115) pointer -> * .

    ID              reduce using rule 115 (pointer -> * .)
    (               reduce using rule 115 (pointer -> * .)
    [               reduce using rule 115 (pointer -> * .)
    ,               reduce using rule 115 (pointer -> * .)
    )               reduce using rule 115 (pointer -> * .)


state 21

    (108) direct_declarator -> ID .

    [               reduce using rule 108 (direct_declarator -> ID .)
    (               reduce using rule 108 (direct_declarator -> ID .)
    =               reduce using rule 108 (direct_declarator -> ID .)
    {               reduce using rule 108 (direct_declarator -> ID .)
    VOID            reduce using rule 108 (direct_declarator -> ID .)
    BOOL            reduce using rule 108 (direct_declarator -> ID .)
    CHAR            reduce using rule 108 (direct_declarator -> ID .)
    INT             reduce using rule 108 (direct_declarator -> ID .)
    STRUCT          reduce using rule 108 (direct_declarator -> ID .)
    ;               reduce using rule 108 (direct_declarator -> ID .)
    ,               reduce using rule 108 (direct_declarator -> ID .)
    )               reduce using rule 108 (direct_declarator -> ID .)
    :               reduce using rule 108 (direct_declarator -> ID .)


state 22

    (109) direct_declarator -> ( . declarator )
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 22

    declarator                     shift and go to state 37
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18

state 23

    (82) declaration_specifiers -> type_specifier declaration_specifiers .

    ;               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ID              reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 24

    (92) struct_specifier -> STRUCT ID . { struct_declaration_list }
    (94) struct_specifier -> STRUCT ID .

    {               shift and go to state 38
    VOID            reduce using rule 94 (struct_specifier -> STRUCT ID .)
    BOOL            reduce using rule 94 (struct_specifier -> STRUCT ID .)
    CHAR            reduce using rule 94 (struct_specifier -> STRUCT ID .)
    INT             reduce using rule 94 (struct_specifier -> STRUCT ID .)
    STRUCT          reduce using rule 94 (struct_specifier -> STRUCT ID .)
    ;               reduce using rule 94 (struct_specifier -> STRUCT ID .)
    *               reduce using rule 94 (struct_specifier -> STRUCT ID .)
    ID              reduce using rule 94 (struct_specifier -> STRUCT ID .)
    (               reduce using rule 94 (struct_specifier -> STRUCT ID .)
    [               reduce using rule 94 (struct_specifier -> STRUCT ID .)
    ,               reduce using rule 94 (struct_specifier -> STRUCT ID .)
    )               reduce using rule 94 (struct_specifier -> STRUCT ID .)
    :               reduce using rule 94 (struct_specifier -> STRUCT ID .)


state 25

    (93) struct_specifier -> STRUCT { . struct_declaration_list }
    (95) struct_declaration_list -> . struct_declaration
    (96) struct_declaration_list -> . struct_declaration_list struct_declaration
    (97) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (98) struct_declaration -> . specifier_qualifier_list ;
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    struct_declaration_list        shift and go to state 39
    struct_declaration             shift and go to state 40
    specifier_qualifier_list       shift and go to state 41
    type_specifier                 shift and go to state 42
    struct_specifier               shift and go to state 11

state 26

    (79) declaration -> declaration_specifiers . init_declarator_list ;
    (80) declaration -> declaration_specifiers . ;
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list , init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator = initializer
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 16
    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 22

    init_declarator_list           shift and go to state 15
    init_declarator                shift and go to state 19
    declarator                     shift and go to state 43
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18

state 27

    (174) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (177) declaration_list -> declaration_list . declaration
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    {               shift and go to state 31
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    declaration_specifiers         shift and go to state 26
    compound_statement             shift and go to state 44
    declaration                    shift and go to state 45
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 28

    (175) function_definition -> declaration_specifiers declarator compound_statement .

    VOID            reduce using rule 175 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 175 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 175 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 175 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 175 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 175 (function_definition -> declaration_specifiers declarator compound_statement .)


state 29

    (86) init_declarator -> declarator = . initializer
    (138) initializer -> . assignment_expression
    (139) initializer -> . { initializer_list }
    (140) initializer -> . { initializer_list , }
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 48
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    initializer                    shift and go to state 46
    assignment_expression          shift and go to state 47
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 30

    (176) declaration_list -> declaration .

    {               reduce using rule 176 (declaration_list -> declaration .)
    VOID            reduce using rule 176 (declaration_list -> declaration .)
    BOOL            reduce using rule 176 (declaration_list -> declaration .)
    CHAR            reduce using rule 176 (declaration_list -> declaration .)
    INT             reduce using rule 176 (declaration_list -> declaration .)
    STRUCT          reduce using rule 176 (declaration_list -> declaration .)


state 31

    (154) compound_statement -> { . }
    (155) compound_statement -> { . block_item_list }
    (156) block_item_list -> . block_item
    (157) block_item_list -> . block_item_list block_item
    (158) block_item -> . declaration
    (159) block_item -> . statement
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 81
    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    block_item_list                shift and go to state 82
    block_item                     shift and go to state 83
    declaration                    shift and go to state 84
    statement                      shift and go to state 85
    declaration_specifiers         shift and go to state 26
    compound_statement             shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    type_specifier                 shift and go to state 6
    expression                     shift and go to state 91
    struct_specifier               shift and go to state 11
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 32

    (79) declaration -> declaration_specifiers init_declarator_list ; .

    VOID            reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_OP          reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC_OP          reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    ID              reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_CONST    reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT_CONST       reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR_CONST      reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL_CONST      reduce using rule 79 (declaration -> declaration_specifiers init_declarator_list ; .)


state 33

    (84) init_declarator_list -> init_declarator_list , . init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator = initializer
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 22

    init_declarator                shift and go to state 97
    declarator                     shift and go to state 43
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18

state 34

    (106) declarator -> pointer direct_declarator .
    (110) direct_declarator -> direct_declarator . [ ]
    (111) direct_declarator -> direct_declarator . [ constant_expression ]
    (112) direct_declarator -> direct_declarator . ( parameter_type_list )
    (113) direct_declarator -> direct_declarator . ( identifier_list )
    (114) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 106 (declarator -> pointer direct_declarator .)
    {               reduce using rule 106 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 106 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 106 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 106 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 106 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 106 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 106 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 106 (declarator -> pointer direct_declarator .)
    )               reduce using rule 106 (declarator -> pointer direct_declarator .)
    :               reduce using rule 106 (declarator -> pointer direct_declarator .)
    [               shift and go to state 35
    (               shift and go to state 36


state 35

    (110) direct_declarator -> direct_declarator [ . ]
    (111) direct_declarator -> direct_declarator [ . constant_expression ]
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    ]               shift and go to state 98
    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    constant_expression            shift and go to state 99
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 51
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 36

    (112) direct_declarator -> direct_declarator ( . parameter_type_list )
    (113) direct_declarator -> direct_declarator ( . identifier_list )
    (114) direct_declarator -> direct_declarator ( . )
    (116) parameter_type_list -> . parameter_list
    (122) identifier_list -> . ID
    (123) identifier_list -> . identifier_list , ID
    (117) parameter_list -> . parameter_declaration
    (118) parameter_list -> . parameter_list , parameter_declaration
    (119) parameter_declaration -> . declaration_specifiers declarator
    (120) parameter_declaration -> . declaration_specifiers abstract_declarator
    (121) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    )               shift and go to state 104
    ID              shift and go to state 107
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    parameter_type_list            shift and go to state 103
    identifier_list                shift and go to state 105
    parameter_list                 shift and go to state 106
    parameter_declaration          shift and go to state 108
    declaration_specifiers         shift and go to state 109
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 37

    (109) direct_declarator -> ( declarator . )

    )               shift and go to state 110


state 38

    (92) struct_specifier -> STRUCT ID { . struct_declaration_list }
    (95) struct_declaration_list -> . struct_declaration
    (96) struct_declaration_list -> . struct_declaration_list struct_declaration
    (97) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (98) struct_declaration -> . specifier_qualifier_list ;
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    struct_declaration_list        shift and go to state 111
    struct_declaration             shift and go to state 40
    specifier_qualifier_list       shift and go to state 41
    type_specifier                 shift and go to state 42
    struct_specifier               shift and go to state 11

state 39

    (93) struct_specifier -> STRUCT { struct_declaration_list . }
    (96) struct_declaration_list -> struct_declaration_list . struct_declaration
    (97) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (98) struct_declaration -> . specifier_qualifier_list ;
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    }               shift and go to state 112
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    struct_declaration             shift and go to state 113
    specifier_qualifier_list       shift and go to state 41
    type_specifier                 shift and go to state 42
    struct_specifier               shift and go to state 11

state 40

    (95) struct_declaration_list -> struct_declaration .

    }               reduce using rule 95 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 95 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 95 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 95 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 95 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 95 (struct_declaration_list -> struct_declaration .)


state 41

    (97) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (98) struct_declaration -> specifier_qualifier_list . ;
    (101) struct_declarator_list -> . struct_declarator
    (102) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (103) struct_declarator -> . declarator
    (104) struct_declarator -> . : constant_expression
    (105) struct_declarator -> . declarator : constant_expression
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 115
    :               shift and go to state 118
    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 22

    struct_declarator_list         shift and go to state 114
    struct_declarator              shift and go to state 116
    declarator                     shift and go to state 117
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18

state 42

    (99) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (100) specifier_qualifier_list -> type_specifier .
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    ;               reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    :               reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 100 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    type_specifier                 shift and go to state 42
    specifier_qualifier_list       shift and go to state 119
    struct_specifier               shift and go to state 11

state 43

    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . = initializer

    ;               reduce using rule 85 (init_declarator -> declarator .)
    ,               reduce using rule 85 (init_declarator -> declarator .)
    =               shift and go to state 29


state 44

    (174) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    VOID            reduce using rule 174 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 174 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 174 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 174 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 174 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 174 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 45

    (177) declaration_list -> declaration_list declaration .

    {               reduce using rule 177 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 177 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 177 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 177 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 177 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 177 (declaration_list -> declaration_list declaration .)


state 46

    (86) init_declarator -> declarator = initializer .

    ;               reduce using rule 86 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 86 (init_declarator -> declarator = initializer .)


state 47

    (138) initializer -> assignment_expression .

    ;               reduce using rule 138 (initializer -> assignment_expression .)
    ,               reduce using rule 138 (initializer -> assignment_expression .)
    }               reduce using rule 138 (initializer -> assignment_expression .)


state 48

    (139) initializer -> { . initializer_list }
    (140) initializer -> { . initializer_list , }
    (141) initializer_list -> . initializer
    (142) initializer_list -> . initializer_list , initializer
    (143) initializer_list -> . initializer_list , designation initializer
    (144) initializer_list -> . designation initializer
    (138) initializer -> . assignment_expression
    (139) initializer -> . { initializer_list }
    (140) initializer -> . { initializer_list , }
    (145) designation -> . designator_list =
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) designator_list -> . designator
    (147) designator_list -> . designator_list designator
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (148) designator -> . [ constant_expression ]
    (149) designator -> . . ID
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 48
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    [               shift and go to state 125
    .               shift and go to state 126
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    initializer_list               shift and go to state 120
    initializer                    shift and go to state 121
    designation                    shift and go to state 122
    assignment_expression          shift and go to state 47
    designator_list                shift and go to state 123
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    designator                     shift and go to state 124
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 49

    (63) assignment_expression -> conditional_expression .

    ;               reduce using rule 63 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 63 (assignment_expression -> conditional_expression .)
    }               reduce using rule 63 (assignment_expression -> conditional_expression .)
    )               reduce using rule 63 (assignment_expression -> conditional_expression .)
    :               reduce using rule 63 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 63 (assignment_expression -> conditional_expression .)


state 50

    (64) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (31) cast_expression -> unary_expression .
    (65) assignment_operator -> . =
    (66) assignment_operator -> . MUL_ASSIGN
    (67) assignment_operator -> . DIV_ASSIGN
    (68) assignment_operator -> . MOD_ASSIGN
    (69) assignment_operator -> . ADD_ASSIGN
    (70) assignment_operator -> . SUB_ASSIGN
    (71) assignment_operator -> . LEFT_ASSIGN
    (72) assignment_operator -> . RIGHT_ASSIGN
    (73) assignment_operator -> . AND_ASSIGN
    (74) assignment_operator -> . XOR_ASSIGN
    (75) assignment_operator -> . OR_ASSIGN

    *               reduce using rule 31 (cast_expression -> unary_expression .)
    /               reduce using rule 31 (cast_expression -> unary_expression .)
    %               reduce using rule 31 (cast_expression -> unary_expression .)
    +               reduce using rule 31 (cast_expression -> unary_expression .)
    -               reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 31 (cast_expression -> unary_expression .)
    <               reduce using rule 31 (cast_expression -> unary_expression .)
    >               reduce using rule 31 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    &               reduce using rule 31 (cast_expression -> unary_expression .)
    ^               reduce using rule 31 (cast_expression -> unary_expression .)
    |               reduce using rule 31 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 31 (cast_expression -> unary_expression .)
    ?               reduce using rule 31 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    ;               reduce using rule 31 (cast_expression -> unary_expression .)
    ,               reduce using rule 31 (cast_expression -> unary_expression .)
    }               reduce using rule 31 (cast_expression -> unary_expression .)
    )               reduce using rule 31 (cast_expression -> unary_expression .)
    :               reduce using rule 31 (cast_expression -> unary_expression .)
    ]               reduce using rule 31 (cast_expression -> unary_expression .)
    =               shift and go to state 128
    MUL_ASSIGN      shift and go to state 129
    DIV_ASSIGN      shift and go to state 130
    MOD_ASSIGN      shift and go to state 131
    ADD_ASSIGN      shift and go to state 132
    SUB_ASSIGN      shift and go to state 133
    LEFT_ASSIGN     shift and go to state 134
    RIGHT_ASSIGN    shift and go to state 135
    AND_ASSIGN      shift and go to state 136
    XOR_ASSIGN      shift and go to state 137
    OR_ASSIGN       shift and go to state 138

    assignment_operator            shift and go to state 127

state 51

    (61) conditional_expression -> logical_or_expression .
    (62) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (60) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 61 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 61 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 61 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 61 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 61 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 61 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 139
    OR_OP           shift and go to state 140


state 52

    (19) unary_expression -> postfix_expression .
    (10) postfix_expression -> postfix_expression . [ expression ]
    (11) postfix_expression -> postfix_expression . ( )
    (12) postfix_expression -> postfix_expression . ( argument_expression_list )
    (13) postfix_expression -> postfix_expression . . ID
    (14) postfix_expression -> postfix_expression . PTR_OP ID
    (15) postfix_expression -> postfix_expression . INC_OP
    (16) postfix_expression -> postfix_expression . DEC_OP

    =               reduce using rule 19 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> postfix_expression .)
    *               reduce using rule 19 (unary_expression -> postfix_expression .)
    /               reduce using rule 19 (unary_expression -> postfix_expression .)
    %               reduce using rule 19 (unary_expression -> postfix_expression .)
    +               reduce using rule 19 (unary_expression -> postfix_expression .)
    -               reduce using rule 19 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 19 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 19 (unary_expression -> postfix_expression .)
    <               reduce using rule 19 (unary_expression -> postfix_expression .)
    >               reduce using rule 19 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    &               reduce using rule 19 (unary_expression -> postfix_expression .)
    ^               reduce using rule 19 (unary_expression -> postfix_expression .)
    |               reduce using rule 19 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> postfix_expression .)
    ?               reduce using rule 19 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> postfix_expression .)
    ;               reduce using rule 19 (unary_expression -> postfix_expression .)
    ,               reduce using rule 19 (unary_expression -> postfix_expression .)
    ]               reduce using rule 19 (unary_expression -> postfix_expression .)
    }               reduce using rule 19 (unary_expression -> postfix_expression .)
    )               reduce using rule 19 (unary_expression -> postfix_expression .)
    :               reduce using rule 19 (unary_expression -> postfix_expression .)
    [               shift and go to state 141
    (               shift and go to state 142
    .               shift and go to state 143
    PTR_OP          shift and go to state 144
    INC_OP          shift and go to state 145
    DEC_OP          shift and go to state 146


state 53

    (20) unary_expression -> INC_OP . unary_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 148
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    unary_expression               shift and go to state 147
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 54

    (21) unary_expression -> DEC_OP . unary_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 148
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 55

    (22) unary_expression -> unary_operator . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 150
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 56

    (33) multiplicative_expression -> cast_expression .

    *               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 33 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 33 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 33 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 33 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 33 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 33 (multiplicative_expression -> cast_expression .)


state 57

    (23) unary_expression -> SIZEOF . unary_expression
    (24) unary_expression -> SIZEOF . ( type_name )
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 152
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    unary_expression               shift and go to state 151
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 58

    (4) primary_expression -> ( . expression )
    (32) cast_expression -> ( . type_name ) cast_expression
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (124) type_name -> . specifier_qualifier_list abstract_declarator
    (125) type_name -> . specifier_qualifier_list
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    STRUCT          shift and go to state 12
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 153
    type_name                      shift and go to state 154
    cast_expression                shift and go to state 56
    assignment_expression          shift and go to state 96
    specifier_qualifier_list       shift and go to state 155
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    type_specifier                 shift and go to state 42
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    struct_specifier               shift and go to state 11
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 59

    (59) logical_or_expression -> logical_and_expression .
    (58) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 59 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 156


state 60

    (9) postfix_expression -> primary_expression .

    [               reduce using rule 9 (postfix_expression -> primary_expression .)
    (               reduce using rule 9 (postfix_expression -> primary_expression .)
    .               reduce using rule 9 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    =               reduce using rule 9 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 9 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 9 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 9 (postfix_expression -> primary_expression .)
    *               reduce using rule 9 (postfix_expression -> primary_expression .)
    /               reduce using rule 9 (postfix_expression -> primary_expression .)
    %               reduce using rule 9 (postfix_expression -> primary_expression .)
    +               reduce using rule 9 (postfix_expression -> primary_expression .)
    -               reduce using rule 9 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 9 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 9 (postfix_expression -> primary_expression .)
    <               reduce using rule 9 (postfix_expression -> primary_expression .)
    >               reduce using rule 9 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    &               reduce using rule 9 (postfix_expression -> primary_expression .)
    ^               reduce using rule 9 (postfix_expression -> primary_expression .)
    |               reduce using rule 9 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 9 (postfix_expression -> primary_expression .)
    ?               reduce using rule 9 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 9 (postfix_expression -> primary_expression .)
    ;               reduce using rule 9 (postfix_expression -> primary_expression .)
    ,               reduce using rule 9 (postfix_expression -> primary_expression .)
    ]               reduce using rule 9 (postfix_expression -> primary_expression .)
    }               reduce using rule 9 (postfix_expression -> primary_expression .)
    )               reduce using rule 9 (postfix_expression -> primary_expression .)
    :               reduce using rule 9 (postfix_expression -> primary_expression .)


state 61

    (1) primary_expression -> ID .

    [               reduce using rule 1 (primary_expression -> ID .)
    (               reduce using rule 1 (primary_expression -> ID .)
    .               reduce using rule 1 (primary_expression -> ID .)
    PTR_OP          reduce using rule 1 (primary_expression -> ID .)
    INC_OP          reduce using rule 1 (primary_expression -> ID .)
    DEC_OP          reduce using rule 1 (primary_expression -> ID .)
    =               reduce using rule 1 (primary_expression -> ID .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> ID .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> ID .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> ID .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> ID .)
    *               reduce using rule 1 (primary_expression -> ID .)
    /               reduce using rule 1 (primary_expression -> ID .)
    %               reduce using rule 1 (primary_expression -> ID .)
    +               reduce using rule 1 (primary_expression -> ID .)
    -               reduce using rule 1 (primary_expression -> ID .)
    LEFT_OP         reduce using rule 1 (primary_expression -> ID .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> ID .)
    <               reduce using rule 1 (primary_expression -> ID .)
    >               reduce using rule 1 (primary_expression -> ID .)
    LE_OP           reduce using rule 1 (primary_expression -> ID .)
    GE_OP           reduce using rule 1 (primary_expression -> ID .)
    EQ_OP           reduce using rule 1 (primary_expression -> ID .)
    NE_OP           reduce using rule 1 (primary_expression -> ID .)
    &               reduce using rule 1 (primary_expression -> ID .)
    ^               reduce using rule 1 (primary_expression -> ID .)
    |               reduce using rule 1 (primary_expression -> ID .)
    AND_OP          reduce using rule 1 (primary_expression -> ID .)
    ?               reduce using rule 1 (primary_expression -> ID .)
    OR_OP           reduce using rule 1 (primary_expression -> ID .)
    ;               reduce using rule 1 (primary_expression -> ID .)
    ,               reduce using rule 1 (primary_expression -> ID .)
    ]               reduce using rule 1 (primary_expression -> ID .)
    }               reduce using rule 1 (primary_expression -> ID .)
    )               reduce using rule 1 (primary_expression -> ID .)
    :               reduce using rule 1 (primary_expression -> ID .)


state 62

    (25) unary_operator -> & .

    (               reduce using rule 25 (unary_operator -> & .)
    INC_OP          reduce using rule 25 (unary_operator -> & .)
    DEC_OP          reduce using rule 25 (unary_operator -> & .)
    SIZEOF          reduce using rule 25 (unary_operator -> & .)
    &               reduce using rule 25 (unary_operator -> & .)
    *               reduce using rule 25 (unary_operator -> & .)
    +               reduce using rule 25 (unary_operator -> & .)
    -               reduce using rule 25 (unary_operator -> & .)
    ~               reduce using rule 25 (unary_operator -> & .)
    !               reduce using rule 25 (unary_operator -> & .)
    ID              reduce using rule 25 (unary_operator -> & .)
    STRING_CONST    reduce using rule 25 (unary_operator -> & .)
    INT_CONST       reduce using rule 25 (unary_operator -> & .)
    CHAR_CONST      reduce using rule 25 (unary_operator -> & .)
    BOOL_CONST      reduce using rule 25 (unary_operator -> & .)


state 63

    (26) unary_operator -> * .

    (               reduce using rule 26 (unary_operator -> * .)
    INC_OP          reduce using rule 26 (unary_operator -> * .)
    DEC_OP          reduce using rule 26 (unary_operator -> * .)
    SIZEOF          reduce using rule 26 (unary_operator -> * .)
    &               reduce using rule 26 (unary_operator -> * .)
    *               reduce using rule 26 (unary_operator -> * .)
    +               reduce using rule 26 (unary_operator -> * .)
    -               reduce using rule 26 (unary_operator -> * .)
    ~               reduce using rule 26 (unary_operator -> * .)
    !               reduce using rule 26 (unary_operator -> * .)
    ID              reduce using rule 26 (unary_operator -> * .)
    STRING_CONST    reduce using rule 26 (unary_operator -> * .)
    INT_CONST       reduce using rule 26 (unary_operator -> * .)
    CHAR_CONST      reduce using rule 26 (unary_operator -> * .)
    BOOL_CONST      reduce using rule 26 (unary_operator -> * .)


state 64

    (27) unary_operator -> + .

    (               reduce using rule 27 (unary_operator -> + .)
    INC_OP          reduce using rule 27 (unary_operator -> + .)
    DEC_OP          reduce using rule 27 (unary_operator -> + .)
    SIZEOF          reduce using rule 27 (unary_operator -> + .)
    &               reduce using rule 27 (unary_operator -> + .)
    *               reduce using rule 27 (unary_operator -> + .)
    +               reduce using rule 27 (unary_operator -> + .)
    -               reduce using rule 27 (unary_operator -> + .)
    ~               reduce using rule 27 (unary_operator -> + .)
    !               reduce using rule 27 (unary_operator -> + .)
    ID              reduce using rule 27 (unary_operator -> + .)
    STRING_CONST    reduce using rule 27 (unary_operator -> + .)
    INT_CONST       reduce using rule 27 (unary_operator -> + .)
    CHAR_CONST      reduce using rule 27 (unary_operator -> + .)
    BOOL_CONST      reduce using rule 27 (unary_operator -> + .)


state 65

    (28) unary_operator -> - .

    (               reduce using rule 28 (unary_operator -> - .)
    INC_OP          reduce using rule 28 (unary_operator -> - .)
    DEC_OP          reduce using rule 28 (unary_operator -> - .)
    SIZEOF          reduce using rule 28 (unary_operator -> - .)
    &               reduce using rule 28 (unary_operator -> - .)
    *               reduce using rule 28 (unary_operator -> - .)
    +               reduce using rule 28 (unary_operator -> - .)
    -               reduce using rule 28 (unary_operator -> - .)
    ~               reduce using rule 28 (unary_operator -> - .)
    !               reduce using rule 28 (unary_operator -> - .)
    ID              reduce using rule 28 (unary_operator -> - .)
    STRING_CONST    reduce using rule 28 (unary_operator -> - .)
    INT_CONST       reduce using rule 28 (unary_operator -> - .)
    CHAR_CONST      reduce using rule 28 (unary_operator -> - .)
    BOOL_CONST      reduce using rule 28 (unary_operator -> - .)


state 66

    (29) unary_operator -> ~ .

    (               reduce using rule 29 (unary_operator -> ~ .)
    INC_OP          reduce using rule 29 (unary_operator -> ~ .)
    DEC_OP          reduce using rule 29 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 29 (unary_operator -> ~ .)
    &               reduce using rule 29 (unary_operator -> ~ .)
    *               reduce using rule 29 (unary_operator -> ~ .)
    +               reduce using rule 29 (unary_operator -> ~ .)
    -               reduce using rule 29 (unary_operator -> ~ .)
    ~               reduce using rule 29 (unary_operator -> ~ .)
    !               reduce using rule 29 (unary_operator -> ~ .)
    ID              reduce using rule 29 (unary_operator -> ~ .)
    STRING_CONST    reduce using rule 29 (unary_operator -> ~ .)
    INT_CONST       reduce using rule 29 (unary_operator -> ~ .)
    CHAR_CONST      reduce using rule 29 (unary_operator -> ~ .)
    BOOL_CONST      reduce using rule 29 (unary_operator -> ~ .)


state 67

    (30) unary_operator -> ! .

    (               reduce using rule 30 (unary_operator -> ! .)
    INC_OP          reduce using rule 30 (unary_operator -> ! .)
    DEC_OP          reduce using rule 30 (unary_operator -> ! .)
    SIZEOF          reduce using rule 30 (unary_operator -> ! .)
    &               reduce using rule 30 (unary_operator -> ! .)
    *               reduce using rule 30 (unary_operator -> ! .)
    +               reduce using rule 30 (unary_operator -> ! .)
    -               reduce using rule 30 (unary_operator -> ! .)
    ~               reduce using rule 30 (unary_operator -> ! .)
    !               reduce using rule 30 (unary_operator -> ! .)
    ID              reduce using rule 30 (unary_operator -> ! .)
    STRING_CONST    reduce using rule 30 (unary_operator -> ! .)
    INT_CONST       reduce using rule 30 (unary_operator -> ! .)
    CHAR_CONST      reduce using rule 30 (unary_operator -> ! .)
    BOOL_CONST      reduce using rule 30 (unary_operator -> ! .)


state 68

    (57) logical_and_expression -> inclusive_or_expression .
    (56) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 57 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 157


state 69

    (2) primary_expression -> constant .

    [               reduce using rule 2 (primary_expression -> constant .)
    (               reduce using rule 2 (primary_expression -> constant .)
    .               reduce using rule 2 (primary_expression -> constant .)
    PTR_OP          reduce using rule 2 (primary_expression -> constant .)
    INC_OP          reduce using rule 2 (primary_expression -> constant .)
    DEC_OP          reduce using rule 2 (primary_expression -> constant .)
    =               reduce using rule 2 (primary_expression -> constant .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> constant .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> constant .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> constant .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> constant .)
    *               reduce using rule 2 (primary_expression -> constant .)
    /               reduce using rule 2 (primary_expression -> constant .)
    %               reduce using rule 2 (primary_expression -> constant .)
    +               reduce using rule 2 (primary_expression -> constant .)
    -               reduce using rule 2 (primary_expression -> constant .)
    LEFT_OP         reduce using rule 2 (primary_expression -> constant .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> constant .)
    <               reduce using rule 2 (primary_expression -> constant .)
    >               reduce using rule 2 (primary_expression -> constant .)
    LE_OP           reduce using rule 2 (primary_expression -> constant .)
    GE_OP           reduce using rule 2 (primary_expression -> constant .)
    EQ_OP           reduce using rule 2 (primary_expression -> constant .)
    NE_OP           reduce using rule 2 (primary_expression -> constant .)
    &               reduce using rule 2 (primary_expression -> constant .)
    ^               reduce using rule 2 (primary_expression -> constant .)
    |               reduce using rule 2 (primary_expression -> constant .)
    AND_OP          reduce using rule 2 (primary_expression -> constant .)
    ?               reduce using rule 2 (primary_expression -> constant .)
    OR_OP           reduce using rule 2 (primary_expression -> constant .)
    ;               reduce using rule 2 (primary_expression -> constant .)
    ,               reduce using rule 2 (primary_expression -> constant .)
    ]               reduce using rule 2 (primary_expression -> constant .)
    }               reduce using rule 2 (primary_expression -> constant .)
    )               reduce using rule 2 (primary_expression -> constant .)
    :               reduce using rule 2 (primary_expression -> constant .)


state 70

    (3) primary_expression -> STRING_CONST .
    (7) constant -> STRING_CONST .

  ! reduce/reduce conflict for [ resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ( resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for . resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for PTR_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for INC_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for DEC_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for = resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for MUL_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for DIV_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for MOD_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ADD_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for SUB_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for LEFT_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for RIGHT_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for AND_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for XOR_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for OR_ASSIGN resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for * resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for / resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for % resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for + resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for - resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for LEFT_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for RIGHT_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for < resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for > resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for LE_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for GE_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for NE_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for & resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ^ resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for | resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for AND_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ? resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for OR_OP resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ; resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for , resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ] resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for } resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for ) resolved using rule 3 (primary_expression -> STRING_CONST .)
  ! reduce/reduce conflict for : resolved using rule 3 (primary_expression -> STRING_CONST .)
    [               reduce using rule 3 (primary_expression -> STRING_CONST .)
    (               reduce using rule 3 (primary_expression -> STRING_CONST .)
    .               reduce using rule 3 (primary_expression -> STRING_CONST .)
    PTR_OP          reduce using rule 3 (primary_expression -> STRING_CONST .)
    INC_OP          reduce using rule 3 (primary_expression -> STRING_CONST .)
    DEC_OP          reduce using rule 3 (primary_expression -> STRING_CONST .)
    =               reduce using rule 3 (primary_expression -> STRING_CONST .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> STRING_CONST .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> STRING_CONST .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> STRING_CONST .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> STRING_CONST .)
    *               reduce using rule 3 (primary_expression -> STRING_CONST .)
    /               reduce using rule 3 (primary_expression -> STRING_CONST .)
    %               reduce using rule 3 (primary_expression -> STRING_CONST .)
    +               reduce using rule 3 (primary_expression -> STRING_CONST .)
    -               reduce using rule 3 (primary_expression -> STRING_CONST .)
    LEFT_OP         reduce using rule 3 (primary_expression -> STRING_CONST .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> STRING_CONST .)
    <               reduce using rule 3 (primary_expression -> STRING_CONST .)
    >               reduce using rule 3 (primary_expression -> STRING_CONST .)
    LE_OP           reduce using rule 3 (primary_expression -> STRING_CONST .)
    GE_OP           reduce using rule 3 (primary_expression -> STRING_CONST .)
    EQ_OP           reduce using rule 3 (primary_expression -> STRING_CONST .)
    NE_OP           reduce using rule 3 (primary_expression -> STRING_CONST .)
    &               reduce using rule 3 (primary_expression -> STRING_CONST .)
    ^               reduce using rule 3 (primary_expression -> STRING_CONST .)
    |               reduce using rule 3 (primary_expression -> STRING_CONST .)
    AND_OP          reduce using rule 3 (primary_expression -> STRING_CONST .)
    ?               reduce using rule 3 (primary_expression -> STRING_CONST .)
    OR_OP           reduce using rule 3 (primary_expression -> STRING_CONST .)
    ;               reduce using rule 3 (primary_expression -> STRING_CONST .)
    ,               reduce using rule 3 (primary_expression -> STRING_CONST .)
    ]               reduce using rule 3 (primary_expression -> STRING_CONST .)
    }               reduce using rule 3 (primary_expression -> STRING_CONST .)
    )               reduce using rule 3 (primary_expression -> STRING_CONST .)
    :               reduce using rule 3 (primary_expression -> STRING_CONST .)

  ! [               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! (               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! .               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! PTR_OP          [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! INC_OP          [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! DEC_OP          [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! =               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! MUL_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! DIV_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! MOD_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! ADD_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! SUB_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! LEFT_ASSIGN     [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! AND_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! XOR_ASSIGN      [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! OR_ASSIGN       [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! *               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! /               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! %               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! +               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! -               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! LEFT_OP         [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! RIGHT_OP        [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! <               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! >               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! LE_OP           [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! GE_OP           [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! EQ_OP           [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! NE_OP           [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! &               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! ^               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! |               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! AND_OP          [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! ?               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! OR_OP           [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! ;               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! ,               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! ]               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! }               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! )               [ reduce using rule 7 (constant -> STRING_CONST .) ]
  ! :               [ reduce using rule 7 (constant -> STRING_CONST .) ]


state 71

    (55) inclusive_or_expression -> exclusive_or_expression .
    (54) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 55 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 158


state 72

    (5) constant -> INT_CONST .

    [               reduce using rule 5 (constant -> INT_CONST .)
    (               reduce using rule 5 (constant -> INT_CONST .)
    .               reduce using rule 5 (constant -> INT_CONST .)
    PTR_OP          reduce using rule 5 (constant -> INT_CONST .)
    INC_OP          reduce using rule 5 (constant -> INT_CONST .)
    DEC_OP          reduce using rule 5 (constant -> INT_CONST .)
    =               reduce using rule 5 (constant -> INT_CONST .)
    MUL_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    DIV_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    MOD_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    ADD_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    SUB_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    LEFT_ASSIGN     reduce using rule 5 (constant -> INT_CONST .)
    RIGHT_ASSIGN    reduce using rule 5 (constant -> INT_CONST .)
    AND_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    XOR_ASSIGN      reduce using rule 5 (constant -> INT_CONST .)
    OR_ASSIGN       reduce using rule 5 (constant -> INT_CONST .)
    *               reduce using rule 5 (constant -> INT_CONST .)
    /               reduce using rule 5 (constant -> INT_CONST .)
    %               reduce using rule 5 (constant -> INT_CONST .)
    +               reduce using rule 5 (constant -> INT_CONST .)
    -               reduce using rule 5 (constant -> INT_CONST .)
    LEFT_OP         reduce using rule 5 (constant -> INT_CONST .)
    RIGHT_OP        reduce using rule 5 (constant -> INT_CONST .)
    <               reduce using rule 5 (constant -> INT_CONST .)
    >               reduce using rule 5 (constant -> INT_CONST .)
    LE_OP           reduce using rule 5 (constant -> INT_CONST .)
    GE_OP           reduce using rule 5 (constant -> INT_CONST .)
    EQ_OP           reduce using rule 5 (constant -> INT_CONST .)
    NE_OP           reduce using rule 5 (constant -> INT_CONST .)
    &               reduce using rule 5 (constant -> INT_CONST .)
    ^               reduce using rule 5 (constant -> INT_CONST .)
    |               reduce using rule 5 (constant -> INT_CONST .)
    AND_OP          reduce using rule 5 (constant -> INT_CONST .)
    ?               reduce using rule 5 (constant -> INT_CONST .)
    OR_OP           reduce using rule 5 (constant -> INT_CONST .)
    ;               reduce using rule 5 (constant -> INT_CONST .)
    ,               reduce using rule 5 (constant -> INT_CONST .)
    ]               reduce using rule 5 (constant -> INT_CONST .)
    }               reduce using rule 5 (constant -> INT_CONST .)
    )               reduce using rule 5 (constant -> INT_CONST .)
    :               reduce using rule 5 (constant -> INT_CONST .)


state 73

    (6) constant -> CHAR_CONST .

    [               reduce using rule 6 (constant -> CHAR_CONST .)
    (               reduce using rule 6 (constant -> CHAR_CONST .)
    .               reduce using rule 6 (constant -> CHAR_CONST .)
    PTR_OP          reduce using rule 6 (constant -> CHAR_CONST .)
    INC_OP          reduce using rule 6 (constant -> CHAR_CONST .)
    DEC_OP          reduce using rule 6 (constant -> CHAR_CONST .)
    =               reduce using rule 6 (constant -> CHAR_CONST .)
    MUL_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    DIV_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    MOD_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    ADD_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    SUB_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    LEFT_ASSIGN     reduce using rule 6 (constant -> CHAR_CONST .)
    RIGHT_ASSIGN    reduce using rule 6 (constant -> CHAR_CONST .)
    AND_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    XOR_ASSIGN      reduce using rule 6 (constant -> CHAR_CONST .)
    OR_ASSIGN       reduce using rule 6 (constant -> CHAR_CONST .)
    *               reduce using rule 6 (constant -> CHAR_CONST .)
    /               reduce using rule 6 (constant -> CHAR_CONST .)
    %               reduce using rule 6 (constant -> CHAR_CONST .)
    +               reduce using rule 6 (constant -> CHAR_CONST .)
    -               reduce using rule 6 (constant -> CHAR_CONST .)
    LEFT_OP         reduce using rule 6 (constant -> CHAR_CONST .)
    RIGHT_OP        reduce using rule 6 (constant -> CHAR_CONST .)
    <               reduce using rule 6 (constant -> CHAR_CONST .)
    >               reduce using rule 6 (constant -> CHAR_CONST .)
    LE_OP           reduce using rule 6 (constant -> CHAR_CONST .)
    GE_OP           reduce using rule 6 (constant -> CHAR_CONST .)
    EQ_OP           reduce using rule 6 (constant -> CHAR_CONST .)
    NE_OP           reduce using rule 6 (constant -> CHAR_CONST .)
    &               reduce using rule 6 (constant -> CHAR_CONST .)
    ^               reduce using rule 6 (constant -> CHAR_CONST .)
    |               reduce using rule 6 (constant -> CHAR_CONST .)
    AND_OP          reduce using rule 6 (constant -> CHAR_CONST .)
    ?               reduce using rule 6 (constant -> CHAR_CONST .)
    OR_OP           reduce using rule 6 (constant -> CHAR_CONST .)
    ;               reduce using rule 6 (constant -> CHAR_CONST .)
    ,               reduce using rule 6 (constant -> CHAR_CONST .)
    ]               reduce using rule 6 (constant -> CHAR_CONST .)
    }               reduce using rule 6 (constant -> CHAR_CONST .)
    )               reduce using rule 6 (constant -> CHAR_CONST .)
    :               reduce using rule 6 (constant -> CHAR_CONST .)


state 74

    (8) constant -> BOOL_CONST .

    [               reduce using rule 8 (constant -> BOOL_CONST .)
    (               reduce using rule 8 (constant -> BOOL_CONST .)
    .               reduce using rule 8 (constant -> BOOL_CONST .)
    PTR_OP          reduce using rule 8 (constant -> BOOL_CONST .)
    INC_OP          reduce using rule 8 (constant -> BOOL_CONST .)
    DEC_OP          reduce using rule 8 (constant -> BOOL_CONST .)
    =               reduce using rule 8 (constant -> BOOL_CONST .)
    MUL_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    DIV_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    MOD_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    ADD_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    SUB_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    LEFT_ASSIGN     reduce using rule 8 (constant -> BOOL_CONST .)
    RIGHT_ASSIGN    reduce using rule 8 (constant -> BOOL_CONST .)
    AND_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    XOR_ASSIGN      reduce using rule 8 (constant -> BOOL_CONST .)
    OR_ASSIGN       reduce using rule 8 (constant -> BOOL_CONST .)
    *               reduce using rule 8 (constant -> BOOL_CONST .)
    /               reduce using rule 8 (constant -> BOOL_CONST .)
    %               reduce using rule 8 (constant -> BOOL_CONST .)
    +               reduce using rule 8 (constant -> BOOL_CONST .)
    -               reduce using rule 8 (constant -> BOOL_CONST .)
    LEFT_OP         reduce using rule 8 (constant -> BOOL_CONST .)
    RIGHT_OP        reduce using rule 8 (constant -> BOOL_CONST .)
    <               reduce using rule 8 (constant -> BOOL_CONST .)
    >               reduce using rule 8 (constant -> BOOL_CONST .)
    LE_OP           reduce using rule 8 (constant -> BOOL_CONST .)
    GE_OP           reduce using rule 8 (constant -> BOOL_CONST .)
    EQ_OP           reduce using rule 8 (constant -> BOOL_CONST .)
    NE_OP           reduce using rule 8 (constant -> BOOL_CONST .)
    &               reduce using rule 8 (constant -> BOOL_CONST .)
    ^               reduce using rule 8 (constant -> BOOL_CONST .)
    |               reduce using rule 8 (constant -> BOOL_CONST .)
    AND_OP          reduce using rule 8 (constant -> BOOL_CONST .)
    ?               reduce using rule 8 (constant -> BOOL_CONST .)
    OR_OP           reduce using rule 8 (constant -> BOOL_CONST .)
    ;               reduce using rule 8 (constant -> BOOL_CONST .)
    ,               reduce using rule 8 (constant -> BOOL_CONST .)
    ]               reduce using rule 8 (constant -> BOOL_CONST .)
    }               reduce using rule 8 (constant -> BOOL_CONST .)
    )               reduce using rule 8 (constant -> BOOL_CONST .)
    :               reduce using rule 8 (constant -> BOOL_CONST .)


state 75

    (53) exclusive_or_expression -> and_expression .
    (52) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 53 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 53 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 53 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 159


state 76

    (51) and_expression -> equality_expression .
    (49) equality_expression -> equality_expression . EQ_OP relational_expression
    (50) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 51 (and_expression -> equality_expression .)
    ^               reduce using rule 51 (and_expression -> equality_expression .)
    |               reduce using rule 51 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 51 (and_expression -> equality_expression .)
    ?               reduce using rule 51 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 51 (and_expression -> equality_expression .)
    ;               reduce using rule 51 (and_expression -> equality_expression .)
    ,               reduce using rule 51 (and_expression -> equality_expression .)
    ]               reduce using rule 51 (and_expression -> equality_expression .)
    }               reduce using rule 51 (and_expression -> equality_expression .)
    )               reduce using rule 51 (and_expression -> equality_expression .)
    :               reduce using rule 51 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 160
    NE_OP           shift and go to state 161


state 77

    (48) equality_expression -> relational_expression .
    (44) relational_expression -> relational_expression . < shift_expression
    (45) relational_expression -> relational_expression . > shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    &               reduce using rule 48 (equality_expression -> relational_expression .)
    ^               reduce using rule 48 (equality_expression -> relational_expression .)
    |               reduce using rule 48 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 48 (equality_expression -> relational_expression .)
    ?               reduce using rule 48 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 48 (equality_expression -> relational_expression .)
    ;               reduce using rule 48 (equality_expression -> relational_expression .)
    ,               reduce using rule 48 (equality_expression -> relational_expression .)
    ]               reduce using rule 48 (equality_expression -> relational_expression .)
    }               reduce using rule 48 (equality_expression -> relational_expression .)
    )               reduce using rule 48 (equality_expression -> relational_expression .)
    :               reduce using rule 48 (equality_expression -> relational_expression .)
    <               shift and go to state 162
    >               shift and go to state 163
    LE_OP           shift and go to state 164
    GE_OP           shift and go to state 165


state 78

    (43) relational_expression -> shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 43 (relational_expression -> shift_expression .)
    >               reduce using rule 43 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    &               reduce using rule 43 (relational_expression -> shift_expression .)
    ^               reduce using rule 43 (relational_expression -> shift_expression .)
    |               reduce using rule 43 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 43 (relational_expression -> shift_expression .)
    ?               reduce using rule 43 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 43 (relational_expression -> shift_expression .)
    ;               reduce using rule 43 (relational_expression -> shift_expression .)
    ,               reduce using rule 43 (relational_expression -> shift_expression .)
    ]               reduce using rule 43 (relational_expression -> shift_expression .)
    }               reduce using rule 43 (relational_expression -> shift_expression .)
    )               reduce using rule 43 (relational_expression -> shift_expression .)
    :               reduce using rule 43 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 166
    RIGHT_OP        shift and go to state 167


state 79

    (40) shift_expression -> additive_expression .
    (38) additive_expression -> additive_expression . + multiplicative_expression
    (39) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 40 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 40 (shift_expression -> additive_expression .)
    <               reduce using rule 40 (shift_expression -> additive_expression .)
    >               reduce using rule 40 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    &               reduce using rule 40 (shift_expression -> additive_expression .)
    ^               reduce using rule 40 (shift_expression -> additive_expression .)
    |               reduce using rule 40 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 40 (shift_expression -> additive_expression .)
    ?               reduce using rule 40 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 40 (shift_expression -> additive_expression .)
    ;               reduce using rule 40 (shift_expression -> additive_expression .)
    ,               reduce using rule 40 (shift_expression -> additive_expression .)
    ]               reduce using rule 40 (shift_expression -> additive_expression .)
    }               reduce using rule 40 (shift_expression -> additive_expression .)
    )               reduce using rule 40 (shift_expression -> additive_expression .)
    :               reduce using rule 40 (shift_expression -> additive_expression .)
    +               shift and go to state 168
    -               shift and go to state 169


state 80

    (37) additive_expression -> multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . * cast_expression
    (35) multiplicative_expression -> multiplicative_expression . / cast_expression
    (36) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 37 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 37 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 37 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 37 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 37 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 170
    /               shift and go to state 171
    %               shift and go to state 172


state 81

    (154) compound_statement -> { } .

    VOID            reduce using rule 154 (compound_statement -> { } .)
    BOOL            reduce using rule 154 (compound_statement -> { } .)
    CHAR            reduce using rule 154 (compound_statement -> { } .)
    INT             reduce using rule 154 (compound_statement -> { } .)
    STRUCT          reduce using rule 154 (compound_statement -> { } .)
    $end            reduce using rule 154 (compound_statement -> { } .)
    }               reduce using rule 154 (compound_statement -> { } .)
    {               reduce using rule 154 (compound_statement -> { } .)
    ;               reduce using rule 154 (compound_statement -> { } .)
    IF              reduce using rule 154 (compound_statement -> { } .)
    WHILE           reduce using rule 154 (compound_statement -> { } .)
    DO              reduce using rule 154 (compound_statement -> { } .)
    FOR             reduce using rule 154 (compound_statement -> { } .)
    INC_OP          reduce using rule 154 (compound_statement -> { } .)
    DEC_OP          reduce using rule 154 (compound_statement -> { } .)
    SIZEOF          reduce using rule 154 (compound_statement -> { } .)
    &               reduce using rule 154 (compound_statement -> { } .)
    *               reduce using rule 154 (compound_statement -> { } .)
    +               reduce using rule 154 (compound_statement -> { } .)
    -               reduce using rule 154 (compound_statement -> { } .)
    ~               reduce using rule 154 (compound_statement -> { } .)
    !               reduce using rule 154 (compound_statement -> { } .)
    ID              reduce using rule 154 (compound_statement -> { } .)
    STRING_CONST    reduce using rule 154 (compound_statement -> { } .)
    (               reduce using rule 154 (compound_statement -> { } .)
    INT_CONST       reduce using rule 154 (compound_statement -> { } .)
    CHAR_CONST      reduce using rule 154 (compound_statement -> { } .)
    BOOL_CONST      reduce using rule 154 (compound_statement -> { } .)
    ELSE            reduce using rule 154 (compound_statement -> { } .)


state 82

    (155) compound_statement -> { block_item_list . }
    (157) block_item_list -> block_item_list . block_item
    (158) block_item -> . declaration
    (159) block_item -> . statement
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 173
    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    block_item                     shift and go to state 174
    declaration                    shift and go to state 84
    statement                      shift and go to state 85
    declaration_specifiers         shift and go to state 26
    compound_statement             shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    type_specifier                 shift and go to state 6
    expression                     shift and go to state 91
    struct_specifier               shift and go to state 11
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 83

    (156) block_item_list -> block_item .

    }               reduce using rule 156 (block_item_list -> block_item .)
    {               reduce using rule 156 (block_item_list -> block_item .)
    ;               reduce using rule 156 (block_item_list -> block_item .)
    IF              reduce using rule 156 (block_item_list -> block_item .)
    WHILE           reduce using rule 156 (block_item_list -> block_item .)
    DO              reduce using rule 156 (block_item_list -> block_item .)
    FOR             reduce using rule 156 (block_item_list -> block_item .)
    VOID            reduce using rule 156 (block_item_list -> block_item .)
    BOOL            reduce using rule 156 (block_item_list -> block_item .)
    CHAR            reduce using rule 156 (block_item_list -> block_item .)
    INT             reduce using rule 156 (block_item_list -> block_item .)
    STRUCT          reduce using rule 156 (block_item_list -> block_item .)
    INC_OP          reduce using rule 156 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 156 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 156 (block_item_list -> block_item .)
    &               reduce using rule 156 (block_item_list -> block_item .)
    *               reduce using rule 156 (block_item_list -> block_item .)
    +               reduce using rule 156 (block_item_list -> block_item .)
    -               reduce using rule 156 (block_item_list -> block_item .)
    ~               reduce using rule 156 (block_item_list -> block_item .)
    !               reduce using rule 156 (block_item_list -> block_item .)
    ID              reduce using rule 156 (block_item_list -> block_item .)
    STRING_CONST    reduce using rule 156 (block_item_list -> block_item .)
    (               reduce using rule 156 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 156 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 156 (block_item_list -> block_item .)
    BOOL_CONST      reduce using rule 156 (block_item_list -> block_item .)


state 84

    (158) block_item -> declaration .

    }               reduce using rule 158 (block_item -> declaration .)
    {               reduce using rule 158 (block_item -> declaration .)
    ;               reduce using rule 158 (block_item -> declaration .)
    IF              reduce using rule 158 (block_item -> declaration .)
    WHILE           reduce using rule 158 (block_item -> declaration .)
    DO              reduce using rule 158 (block_item -> declaration .)
    FOR             reduce using rule 158 (block_item -> declaration .)
    VOID            reduce using rule 158 (block_item -> declaration .)
    BOOL            reduce using rule 158 (block_item -> declaration .)
    CHAR            reduce using rule 158 (block_item -> declaration .)
    INT             reduce using rule 158 (block_item -> declaration .)
    STRUCT          reduce using rule 158 (block_item -> declaration .)
    INC_OP          reduce using rule 158 (block_item -> declaration .)
    DEC_OP          reduce using rule 158 (block_item -> declaration .)
    SIZEOF          reduce using rule 158 (block_item -> declaration .)
    &               reduce using rule 158 (block_item -> declaration .)
    *               reduce using rule 158 (block_item -> declaration .)
    +               reduce using rule 158 (block_item -> declaration .)
    -               reduce using rule 158 (block_item -> declaration .)
    ~               reduce using rule 158 (block_item -> declaration .)
    !               reduce using rule 158 (block_item -> declaration .)
    ID              reduce using rule 158 (block_item -> declaration .)
    STRING_CONST    reduce using rule 158 (block_item -> declaration .)
    (               reduce using rule 158 (block_item -> declaration .)
    INT_CONST       reduce using rule 158 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 158 (block_item -> declaration .)
    BOOL_CONST      reduce using rule 158 (block_item -> declaration .)


state 85

    (159) block_item -> statement .

    }               reduce using rule 159 (block_item -> statement .)
    {               reduce using rule 159 (block_item -> statement .)
    ;               reduce using rule 159 (block_item -> statement .)
    IF              reduce using rule 159 (block_item -> statement .)
    WHILE           reduce using rule 159 (block_item -> statement .)
    DO              reduce using rule 159 (block_item -> statement .)
    FOR             reduce using rule 159 (block_item -> statement .)
    VOID            reduce using rule 159 (block_item -> statement .)
    BOOL            reduce using rule 159 (block_item -> statement .)
    CHAR            reduce using rule 159 (block_item -> statement .)
    INT             reduce using rule 159 (block_item -> statement .)
    STRUCT          reduce using rule 159 (block_item -> statement .)
    INC_OP          reduce using rule 159 (block_item -> statement .)
    DEC_OP          reduce using rule 159 (block_item -> statement .)
    SIZEOF          reduce using rule 159 (block_item -> statement .)
    &               reduce using rule 159 (block_item -> statement .)
    *               reduce using rule 159 (block_item -> statement .)
    +               reduce using rule 159 (block_item -> statement .)
    -               reduce using rule 159 (block_item -> statement .)
    ~               reduce using rule 159 (block_item -> statement .)
    !               reduce using rule 159 (block_item -> statement .)
    ID              reduce using rule 159 (block_item -> statement .)
    STRING_CONST    reduce using rule 159 (block_item -> statement .)
    (               reduce using rule 159 (block_item -> statement .)
    INT_CONST       reduce using rule 159 (block_item -> statement .)
    CHAR_CONST      reduce using rule 159 (block_item -> statement .)
    BOOL_CONST      reduce using rule 159 (block_item -> statement .)


state 86

    (160) expression_statement -> ; .

    }               reduce using rule 160 (expression_statement -> ; .)
    {               reduce using rule 160 (expression_statement -> ; .)
    ;               reduce using rule 160 (expression_statement -> ; .)
    IF              reduce using rule 160 (expression_statement -> ; .)
    WHILE           reduce using rule 160 (expression_statement -> ; .)
    DO              reduce using rule 160 (expression_statement -> ; .)
    FOR             reduce using rule 160 (expression_statement -> ; .)
    VOID            reduce using rule 160 (expression_statement -> ; .)
    BOOL            reduce using rule 160 (expression_statement -> ; .)
    CHAR            reduce using rule 160 (expression_statement -> ; .)
    INT             reduce using rule 160 (expression_statement -> ; .)
    STRUCT          reduce using rule 160 (expression_statement -> ; .)
    INC_OP          reduce using rule 160 (expression_statement -> ; .)
    DEC_OP          reduce using rule 160 (expression_statement -> ; .)
    SIZEOF          reduce using rule 160 (expression_statement -> ; .)
    &               reduce using rule 160 (expression_statement -> ; .)
    *               reduce using rule 160 (expression_statement -> ; .)
    +               reduce using rule 160 (expression_statement -> ; .)
    -               reduce using rule 160 (expression_statement -> ; .)
    ~               reduce using rule 160 (expression_statement -> ; .)
    !               reduce using rule 160 (expression_statement -> ; .)
    ID              reduce using rule 160 (expression_statement -> ; .)
    STRING_CONST    reduce using rule 160 (expression_statement -> ; .)
    (               reduce using rule 160 (expression_statement -> ; .)
    INT_CONST       reduce using rule 160 (expression_statement -> ; .)
    CHAR_CONST      reduce using rule 160 (expression_statement -> ; .)
    BOOL_CONST      reduce using rule 160 (expression_statement -> ; .)
    )               reduce using rule 160 (expression_statement -> ; .)
    ELSE            reduce using rule 160 (expression_statement -> ; .)


state 87

    (150) statement -> compound_statement .

    }               reduce using rule 150 (statement -> compound_statement .)
    {               reduce using rule 150 (statement -> compound_statement .)
    ;               reduce using rule 150 (statement -> compound_statement .)
    IF              reduce using rule 150 (statement -> compound_statement .)
    WHILE           reduce using rule 150 (statement -> compound_statement .)
    DO              reduce using rule 150 (statement -> compound_statement .)
    FOR             reduce using rule 150 (statement -> compound_statement .)
    VOID            reduce using rule 150 (statement -> compound_statement .)
    BOOL            reduce using rule 150 (statement -> compound_statement .)
    CHAR            reduce using rule 150 (statement -> compound_statement .)
    INT             reduce using rule 150 (statement -> compound_statement .)
    STRUCT          reduce using rule 150 (statement -> compound_statement .)
    INC_OP          reduce using rule 150 (statement -> compound_statement .)
    DEC_OP          reduce using rule 150 (statement -> compound_statement .)
    SIZEOF          reduce using rule 150 (statement -> compound_statement .)
    &               reduce using rule 150 (statement -> compound_statement .)
    *               reduce using rule 150 (statement -> compound_statement .)
    +               reduce using rule 150 (statement -> compound_statement .)
    -               reduce using rule 150 (statement -> compound_statement .)
    ~               reduce using rule 150 (statement -> compound_statement .)
    !               reduce using rule 150 (statement -> compound_statement .)
    ID              reduce using rule 150 (statement -> compound_statement .)
    STRING_CONST    reduce using rule 150 (statement -> compound_statement .)
    (               reduce using rule 150 (statement -> compound_statement .)
    INT_CONST       reduce using rule 150 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 150 (statement -> compound_statement .)
    BOOL_CONST      reduce using rule 150 (statement -> compound_statement .)
    ELSE            reduce using rule 150 (statement -> compound_statement .)


state 88

    (151) statement -> expression_statement .

    }               reduce using rule 151 (statement -> expression_statement .)
    {               reduce using rule 151 (statement -> expression_statement .)
    ;               reduce using rule 151 (statement -> expression_statement .)
    IF              reduce using rule 151 (statement -> expression_statement .)
    WHILE           reduce using rule 151 (statement -> expression_statement .)
    DO              reduce using rule 151 (statement -> expression_statement .)
    FOR             reduce using rule 151 (statement -> expression_statement .)
    VOID            reduce using rule 151 (statement -> expression_statement .)
    BOOL            reduce using rule 151 (statement -> expression_statement .)
    CHAR            reduce using rule 151 (statement -> expression_statement .)
    INT             reduce using rule 151 (statement -> expression_statement .)
    STRUCT          reduce using rule 151 (statement -> expression_statement .)
    INC_OP          reduce using rule 151 (statement -> expression_statement .)
    DEC_OP          reduce using rule 151 (statement -> expression_statement .)
    SIZEOF          reduce using rule 151 (statement -> expression_statement .)
    &               reduce using rule 151 (statement -> expression_statement .)
    *               reduce using rule 151 (statement -> expression_statement .)
    +               reduce using rule 151 (statement -> expression_statement .)
    -               reduce using rule 151 (statement -> expression_statement .)
    ~               reduce using rule 151 (statement -> expression_statement .)
    !               reduce using rule 151 (statement -> expression_statement .)
    ID              reduce using rule 151 (statement -> expression_statement .)
    STRING_CONST    reduce using rule 151 (statement -> expression_statement .)
    (               reduce using rule 151 (statement -> expression_statement .)
    INT_CONST       reduce using rule 151 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 151 (statement -> expression_statement .)
    BOOL_CONST      reduce using rule 151 (statement -> expression_statement .)
    ELSE            reduce using rule 151 (statement -> expression_statement .)


state 89

    (152) statement -> selection_statement .

    }               reduce using rule 152 (statement -> selection_statement .)
    {               reduce using rule 152 (statement -> selection_statement .)
    ;               reduce using rule 152 (statement -> selection_statement .)
    IF              reduce using rule 152 (statement -> selection_statement .)
    WHILE           reduce using rule 152 (statement -> selection_statement .)
    DO              reduce using rule 152 (statement -> selection_statement .)
    FOR             reduce using rule 152 (statement -> selection_statement .)
    VOID            reduce using rule 152 (statement -> selection_statement .)
    BOOL            reduce using rule 152 (statement -> selection_statement .)
    CHAR            reduce using rule 152 (statement -> selection_statement .)
    INT             reduce using rule 152 (statement -> selection_statement .)
    STRUCT          reduce using rule 152 (statement -> selection_statement .)
    INC_OP          reduce using rule 152 (statement -> selection_statement .)
    DEC_OP          reduce using rule 152 (statement -> selection_statement .)
    SIZEOF          reduce using rule 152 (statement -> selection_statement .)
    &               reduce using rule 152 (statement -> selection_statement .)
    *               reduce using rule 152 (statement -> selection_statement .)
    +               reduce using rule 152 (statement -> selection_statement .)
    -               reduce using rule 152 (statement -> selection_statement .)
    ~               reduce using rule 152 (statement -> selection_statement .)
    !               reduce using rule 152 (statement -> selection_statement .)
    ID              reduce using rule 152 (statement -> selection_statement .)
    STRING_CONST    reduce using rule 152 (statement -> selection_statement .)
    (               reduce using rule 152 (statement -> selection_statement .)
    INT_CONST       reduce using rule 152 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 152 (statement -> selection_statement .)
    BOOL_CONST      reduce using rule 152 (statement -> selection_statement .)
    ELSE            reduce using rule 152 (statement -> selection_statement .)


state 90

    (153) statement -> iteration_statement .

    }               reduce using rule 153 (statement -> iteration_statement .)
    {               reduce using rule 153 (statement -> iteration_statement .)
    ;               reduce using rule 153 (statement -> iteration_statement .)
    IF              reduce using rule 153 (statement -> iteration_statement .)
    WHILE           reduce using rule 153 (statement -> iteration_statement .)
    DO              reduce using rule 153 (statement -> iteration_statement .)
    FOR             reduce using rule 153 (statement -> iteration_statement .)
    VOID            reduce using rule 153 (statement -> iteration_statement .)
    BOOL            reduce using rule 153 (statement -> iteration_statement .)
    CHAR            reduce using rule 153 (statement -> iteration_statement .)
    INT             reduce using rule 153 (statement -> iteration_statement .)
    STRUCT          reduce using rule 153 (statement -> iteration_statement .)
    INC_OP          reduce using rule 153 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 153 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 153 (statement -> iteration_statement .)
    &               reduce using rule 153 (statement -> iteration_statement .)
    *               reduce using rule 153 (statement -> iteration_statement .)
    +               reduce using rule 153 (statement -> iteration_statement .)
    -               reduce using rule 153 (statement -> iteration_statement .)
    ~               reduce using rule 153 (statement -> iteration_statement .)
    !               reduce using rule 153 (statement -> iteration_statement .)
    ID              reduce using rule 153 (statement -> iteration_statement .)
    STRING_CONST    reduce using rule 153 (statement -> iteration_statement .)
    (               reduce using rule 153 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 153 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 153 (statement -> iteration_statement .)
    BOOL_CONST      reduce using rule 153 (statement -> iteration_statement .)
    ELSE            reduce using rule 153 (statement -> iteration_statement .)


state 91

    (161) expression_statement -> expression . ;
    (77) expression -> expression . , assignment_expression

    ;               shift and go to state 175
    ,               shift and go to state 176


state 92

    (162) selection_statement -> IF . ( expression ) statement
    (163) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 177


state 93

    (164) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 178


state 94

    (165) iteration_statement -> DO . statement WHILE ( expression ) ;
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    statement                      shift and go to state 179
    expression                     shift and go to state 91
    compound_statement             shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 95

    (166) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (167) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> FOR . ( declaration expression_statement ) statement
    (169) iteration_statement -> FOR . ( declaration expression_statement expression ) statement

    (               shift and go to state 180


state 96

    (76) expression -> assignment_expression .

    ;               reduce using rule 76 (expression -> assignment_expression .)
    ,               reduce using rule 76 (expression -> assignment_expression .)
    )               reduce using rule 76 (expression -> assignment_expression .)
    :               reduce using rule 76 (expression -> assignment_expression .)
    ]               reduce using rule 76 (expression -> assignment_expression .)


state 97

    (84) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 84 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 84 (init_declarator_list -> init_declarator_list , init_declarator .)


state 98

    (110) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    BOOL            reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 110 (direct_declarator -> direct_declarator [ ] .)


state 99

    (111) direct_declarator -> direct_declarator [ constant_expression . ]

    ]               shift and go to state 181


state 100

    (78) constant_expression -> conditional_expression .

    ]               reduce using rule 78 (constant_expression -> conditional_expression .)
    ;               reduce using rule 78 (constant_expression -> conditional_expression .)
    ,               reduce using rule 78 (constant_expression -> conditional_expression .)


state 101

    (31) cast_expression -> unary_expression .

    *               reduce using rule 31 (cast_expression -> unary_expression .)
    /               reduce using rule 31 (cast_expression -> unary_expression .)
    %               reduce using rule 31 (cast_expression -> unary_expression .)
    +               reduce using rule 31 (cast_expression -> unary_expression .)
    -               reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 31 (cast_expression -> unary_expression .)
    <               reduce using rule 31 (cast_expression -> unary_expression .)
    >               reduce using rule 31 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    &               reduce using rule 31 (cast_expression -> unary_expression .)
    ^               reduce using rule 31 (cast_expression -> unary_expression .)
    |               reduce using rule 31 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 31 (cast_expression -> unary_expression .)
    ?               reduce using rule 31 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 31 (cast_expression -> unary_expression .)
    ]               reduce using rule 31 (cast_expression -> unary_expression .)
    =               reduce using rule 31 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 31 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 31 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 31 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 31 (cast_expression -> unary_expression .)
    ;               reduce using rule 31 (cast_expression -> unary_expression .)
    ,               reduce using rule 31 (cast_expression -> unary_expression .)
    }               reduce using rule 31 (cast_expression -> unary_expression .)
    )               reduce using rule 31 (cast_expression -> unary_expression .)
    :               reduce using rule 31 (cast_expression -> unary_expression .)


state 102

    (32) cast_expression -> ( . type_name ) cast_expression
    (4) primary_expression -> ( . expression )
    (124) type_name -> . specifier_qualifier_list abstract_declarator
    (125) type_name -> . specifier_qualifier_list
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    STRUCT          shift and go to state 12
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    type_name                      shift and go to state 154
    cast_expression                shift and go to state 56
    expression                     shift and go to state 153
    specifier_qualifier_list       shift and go to state 155
    assignment_expression          shift and go to state 96
    type_specifier                 shift and go to state 42
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    struct_specifier               shift and go to state 11
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 103

    (112) direct_declarator -> direct_declarator ( parameter_type_list . )

    )               shift and go to state 182


state 104

    (114) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    BOOL            reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 114 (direct_declarator -> direct_declarator ( ) .)


state 105

    (113) direct_declarator -> direct_declarator ( identifier_list . )
    (123) identifier_list -> identifier_list . , ID

    )               shift and go to state 183
    ,               shift and go to state 184


state 106

    (116) parameter_type_list -> parameter_list .
    (118) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 116 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 185


state 107

    (122) identifier_list -> ID .

    )               reduce using rule 122 (identifier_list -> ID .)
    ,               reduce using rule 122 (identifier_list -> ID .)


state 108

    (117) parameter_list -> parameter_declaration .

    ,               reduce using rule 117 (parameter_list -> parameter_declaration .)
    )               reduce using rule 117 (parameter_list -> parameter_declaration .)


state 109

    (119) parameter_declaration -> declaration_specifiers . declarator
    (120) parameter_declaration -> declaration_specifiers . abstract_declarator
    (121) parameter_declaration -> declaration_specifiers .
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (126) abstract_declarator -> . pointer
    (127) abstract_declarator -> . direct_abstract_declarator
    (128) abstract_declarator -> . pointer direct_abstract_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )
    (129) direct_abstract_declarator -> . ( abstract_declarator )
    (130) direct_abstract_declarator -> . [ constant_expression ]
    (131) direct_abstract_declarator -> . [ ]
    (132) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (133) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (134) direct_abstract_declarator -> . ( parameter_type_list )
    (135) direct_abstract_declarator -> . ( )
    (136) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (137) direct_abstract_declarator -> . direct_abstract_declarator ( )

    ,               reduce using rule 121 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 121 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 190
    [               shift and go to state 191

    declarator                     shift and go to state 186
    abstract_declarator            shift and go to state 187
    pointer                        shift and go to state 188
    direct_declarator              shift and go to state 18
    direct_abstract_declarator     shift and go to state 189

state 110

    (109) direct_declarator -> ( declarator ) .

    [               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 109 (direct_declarator -> ( declarator ) .)
    BOOL            reduce using rule 109 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 109 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 109 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 109 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 109 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 109 (direct_declarator -> ( declarator ) .)


state 111

    (92) struct_specifier -> STRUCT ID { struct_declaration_list . }
    (96) struct_declaration_list -> struct_declaration_list . struct_declaration
    (97) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (98) struct_declaration -> . specifier_qualifier_list ;
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    }               shift and go to state 192
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    struct_declaration             shift and go to state 113
    specifier_qualifier_list       shift and go to state 41
    type_specifier                 shift and go to state 42
    struct_specifier               shift and go to state 11

state 112

    (93) struct_specifier -> STRUCT { struct_declaration_list } .

    VOID            reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    BOOL            reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    CHAR            reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    INT             reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    STRUCT          reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    ;               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    *               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    ID              reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    (               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    [               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    ,               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    )               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)
    :               reduce using rule 93 (struct_specifier -> STRUCT { struct_declaration_list } .)


state 113

    (96) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 96 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 96 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 96 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 96 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 96 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 96 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 114

    (97) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (102) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 193
    ,               shift and go to state 194


state 115

    (98) struct_declaration -> specifier_qualifier_list ; .

    }               reduce using rule 98 (struct_declaration -> specifier_qualifier_list ; .)
    VOID            reduce using rule 98 (struct_declaration -> specifier_qualifier_list ; .)
    BOOL            reduce using rule 98 (struct_declaration -> specifier_qualifier_list ; .)
    CHAR            reduce using rule 98 (struct_declaration -> specifier_qualifier_list ; .)
    INT             reduce using rule 98 (struct_declaration -> specifier_qualifier_list ; .)
    STRUCT          reduce using rule 98 (struct_declaration -> specifier_qualifier_list ; .)


state 116

    (101) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 101 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 101 (struct_declarator_list -> struct_declarator .)


state 117

    (103) struct_declarator -> declarator .
    (105) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 103 (struct_declarator -> declarator .)
    ,               reduce using rule 103 (struct_declarator -> declarator .)
    :               shift and go to state 195


state 118

    (104) struct_declarator -> : . constant_expression
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    constant_expression            shift and go to state 196
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 51
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 119

    (99) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    ;               reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    :               reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    ID              reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 99 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 120

    (139) initializer -> { initializer_list . }
    (140) initializer -> { initializer_list . , }
    (142) initializer_list -> initializer_list . , initializer
    (143) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 197
    ,               shift and go to state 198


state 121

    (141) initializer_list -> initializer .

    }               reduce using rule 141 (initializer_list -> initializer .)
    ,               reduce using rule 141 (initializer_list -> initializer .)


state 122

    (144) initializer_list -> designation . initializer
    (138) initializer -> . assignment_expression
    (139) initializer -> . { initializer_list }
    (140) initializer -> . { initializer_list , }
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 48
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    initializer                    shift and go to state 199
    assignment_expression          shift and go to state 47
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 123

    (145) designation -> designator_list . =
    (147) designator_list -> designator_list . designator
    (148) designator -> . [ constant_expression ]
    (149) designator -> . . ID

    =               shift and go to state 200
    [               shift and go to state 125
    .               shift and go to state 126

    designator                     shift and go to state 201

state 124

    (146) designator_list -> designator .

    =               reduce using rule 146 (designator_list -> designator .)
    [               reduce using rule 146 (designator_list -> designator .)
    .               reduce using rule 146 (designator_list -> designator .)


state 125

    (148) designator -> [ . constant_expression ]
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    constant_expression            shift and go to state 202
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 51
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 126

    (149) designator -> . . ID

    ID              shift and go to state 203


state 127

    (64) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    unary_expression               shift and go to state 50
    assignment_expression          shift and go to state 204
    conditional_expression         shift and go to state 49
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 128

    (65) assignment_operator -> = .

    INC_OP          reduce using rule 65 (assignment_operator -> = .)
    DEC_OP          reduce using rule 65 (assignment_operator -> = .)
    SIZEOF          reduce using rule 65 (assignment_operator -> = .)
    &               reduce using rule 65 (assignment_operator -> = .)
    *               reduce using rule 65 (assignment_operator -> = .)
    +               reduce using rule 65 (assignment_operator -> = .)
    -               reduce using rule 65 (assignment_operator -> = .)
    ~               reduce using rule 65 (assignment_operator -> = .)
    !               reduce using rule 65 (assignment_operator -> = .)
    ID              reduce using rule 65 (assignment_operator -> = .)
    STRING_CONST    reduce using rule 65 (assignment_operator -> = .)
    (               reduce using rule 65 (assignment_operator -> = .)
    INT_CONST       reduce using rule 65 (assignment_operator -> = .)
    CHAR_CONST      reduce using rule 65 (assignment_operator -> = .)
    BOOL_CONST      reduce using rule 65 (assignment_operator -> = .)


state 129

    (66) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    &               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    *               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    +               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    ~               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    ID              reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    STRING_CONST    reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    INT_CONST       reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    CHAR_CONST      reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)
    BOOL_CONST      reduce using rule 66 (assignment_operator -> MUL_ASSIGN .)


state 130

    (67) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    &               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    *               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    +               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    ~               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    ID              reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    STRING_CONST    reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    INT_CONST       reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    CHAR_CONST      reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)
    BOOL_CONST      reduce using rule 67 (assignment_operator -> DIV_ASSIGN .)


state 131

    (68) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    &               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    *               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    +               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    ~               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    ID              reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    STRING_CONST    reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    INT_CONST       reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    CHAR_CONST      reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)
    BOOL_CONST      reduce using rule 68 (assignment_operator -> MOD_ASSIGN .)


state 132

    (69) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    &               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    *               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    +               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    ~               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    ID              reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    STRING_CONST    reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    INT_CONST       reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    CHAR_CONST      reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)
    BOOL_CONST      reduce using rule 69 (assignment_operator -> ADD_ASSIGN .)


state 133

    (70) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    &               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    *               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    +               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    ~               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    ID              reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    STRING_CONST    reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    INT_CONST       reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    CHAR_CONST      reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)
    BOOL_CONST      reduce using rule 70 (assignment_operator -> SUB_ASSIGN .)


state 134

    (71) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    &               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    *               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    +               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    ~               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    ID              reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    STRING_CONST    reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    INT_CONST       reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    CHAR_CONST      reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)
    BOOL_CONST      reduce using rule 71 (assignment_operator -> LEFT_ASSIGN .)


state 135

    (72) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    &               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    *               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    +               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    ~               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    ID              reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_CONST    reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    INT_CONST       reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    CHAR_CONST      reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)
    BOOL_CONST      reduce using rule 72 (assignment_operator -> RIGHT_ASSIGN .)


state 136

    (73) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    &               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    *               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    +               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    ID              reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    STRING_CONST    reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    INT_CONST       reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    CHAR_CONST      reduce using rule 73 (assignment_operator -> AND_ASSIGN .)
    BOOL_CONST      reduce using rule 73 (assignment_operator -> AND_ASSIGN .)


state 137

    (74) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    &               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    *               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    +               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    ID              reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    STRING_CONST    reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    INT_CONST       reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    CHAR_CONST      reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)
    BOOL_CONST      reduce using rule 74 (assignment_operator -> XOR_ASSIGN .)


state 138

    (75) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    &               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    *               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    +               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    ID              reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    STRING_CONST    reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    INT_CONST       reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    CHAR_CONST      reduce using rule 75 (assignment_operator -> OR_ASSIGN .)
    BOOL_CONST      reduce using rule 75 (assignment_operator -> OR_ASSIGN .)


state 139

    (62) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    logical_or_expression          shift and go to state 51
    expression                     shift and go to state 205
    conditional_expression         shift and go to state 49
    assignment_expression          shift and go to state 96
    unary_expression               shift and go to state 50
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 140

    (60) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    logical_and_expression         shift and go to state 206
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 141

    (10) postfix_expression -> postfix_expression [ . expression ]
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    postfix_expression             shift and go to state 52
    expression                     shift and go to state 207
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 142

    (11) postfix_expression -> postfix_expression ( . )
    (12) postfix_expression -> postfix_expression ( . argument_expression_list )
    (17) argument_expression_list -> . assignment_expression
    (18) argument_expression_list -> . argument_expression_list , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 208
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    postfix_expression             shift and go to state 52
    argument_expression_list       shift and go to state 209
    assignment_expression          shift and go to state 210
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 143

    (13) postfix_expression -> postfix_expression . . ID

    ID              shift and go to state 211


state 144

    (14) postfix_expression -> postfix_expression PTR_OP . ID

    ID              shift and go to state 212


state 145

    (15) postfix_expression -> postfix_expression INC_OP .

    [               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    (               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    .               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    =               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    *               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    /               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    %               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    +               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    -               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    <               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    >               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    &               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ^               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    |               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ?               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ;               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ,               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    ]               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    }               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    )               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)
    :               reduce using rule 15 (postfix_expression -> postfix_expression INC_OP .)


state 146

    (16) postfix_expression -> postfix_expression DEC_OP .

    [               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    (               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    .               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    =               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    *               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    /               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    %               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    +               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    -               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    <               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    >               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    &               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ^               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    |               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ?               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ;               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ,               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    ]               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    }               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    )               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)
    :               reduce using rule 16 (postfix_expression -> postfix_expression DEC_OP .)


state 147

    (20) unary_expression -> INC_OP unary_expression .

    =               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    *               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    %               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    &               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ^               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    |               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ?               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    }               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)
    :               reduce using rule 20 (unary_expression -> INC_OP unary_expression .)


state 148

    (4) primary_expression -> ( . expression )
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 153
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 149

    (21) unary_expression -> DEC_OP unary_expression .

    =               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    *               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    %               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    &               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ^               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    |               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ?               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    }               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)
    :               reduce using rule 21 (unary_expression -> DEC_OP unary_expression .)


state 150

    (22) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 22 (unary_expression -> unary_operator cast_expression .)


state 151

    (23) unary_expression -> SIZEOF unary_expression .

    =               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    *               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 23 (unary_expression -> SIZEOF unary_expression .)


state 152

    (24) unary_expression -> SIZEOF ( . type_name )
    (4) primary_expression -> ( . expression )
    (124) type_name -> . specifier_qualifier_list abstract_declarator
    (125) type_name -> . specifier_qualifier_list
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (99) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (100) specifier_qualifier_list -> . type_specifier
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    STRUCT          shift and go to state 12
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    type_name                      shift and go to state 213
    expression                     shift and go to state 153
    specifier_qualifier_list       shift and go to state 155
    assignment_expression          shift and go to state 96
    type_specifier                 shift and go to state 42
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    struct_specifier               shift and go to state 11
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 153

    (4) primary_expression -> ( expression . )
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 214
    ,               shift and go to state 176


state 154

    (32) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 215


state 155

    (124) type_name -> specifier_qualifier_list . abstract_declarator
    (125) type_name -> specifier_qualifier_list .
    (126) abstract_declarator -> . pointer
    (127) abstract_declarator -> . direct_abstract_declarator
    (128) abstract_declarator -> . pointer direct_abstract_declarator
    (115) pointer -> . *
    (129) direct_abstract_declarator -> . ( abstract_declarator )
    (130) direct_abstract_declarator -> . [ constant_expression ]
    (131) direct_abstract_declarator -> . [ ]
    (132) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (133) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (134) direct_abstract_declarator -> . ( parameter_type_list )
    (135) direct_abstract_declarator -> . ( )
    (136) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (137) direct_abstract_declarator -> . direct_abstract_declarator ( )

    )               reduce using rule 125 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 20
    (               shift and go to state 218
    [               shift and go to state 191

    abstract_declarator            shift and go to state 216
    pointer                        shift and go to state 217
    direct_abstract_declarator     shift and go to state 189

state 156

    (58) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    inclusive_or_expression        shift and go to state 219
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 157

    (56) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    exclusive_or_expression        shift and go to state 220
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 158

    (54) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    and_expression                 shift and go to state 221
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 159

    (52) and_expression -> and_expression & . equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    equality_expression            shift and go to state 222
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 160

    (49) equality_expression -> equality_expression EQ_OP . relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    relational_expression          shift and go to state 223
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 161

    (50) equality_expression -> equality_expression NE_OP . relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    relational_expression          shift and go to state 224
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 162

    (44) relational_expression -> relational_expression < . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    shift_expression               shift and go to state 225
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 163

    (45) relational_expression -> relational_expression > . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    shift_expression               shift and go to state 226
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 164

    (46) relational_expression -> relational_expression LE_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    shift_expression               shift and go to state 227
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 165

    (47) relational_expression -> relational_expression GE_OP . shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    shift_expression               shift and go to state 228
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 166

    (41) shift_expression -> shift_expression LEFT_OP . additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    additive_expression            shift and go to state 229
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 167

    (42) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    additive_expression            shift and go to state 230
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 168

    (38) additive_expression -> additive_expression + . multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    multiplicative_expression      shift and go to state 231
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 169

    (39) additive_expression -> additive_expression - . multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    multiplicative_expression      shift and go to state 232
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 170

    (34) multiplicative_expression -> multiplicative_expression * . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    cast_expression                shift and go to state 233
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 171

    (35) multiplicative_expression -> multiplicative_expression / . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    cast_expression                shift and go to state 234
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 172

    (36) multiplicative_expression -> multiplicative_expression % . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    cast_expression                shift and go to state 235
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 173

    (155) compound_statement -> { block_item_list } .

    VOID            reduce using rule 155 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 155 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 155 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 155 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 155 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 155 (compound_statement -> { block_item_list } .)
    }               reduce using rule 155 (compound_statement -> { block_item_list } .)
    {               reduce using rule 155 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 155 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 155 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 155 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 155 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 155 (compound_statement -> { block_item_list } .)
    INC_OP          reduce using rule 155 (compound_statement -> { block_item_list } .)
    DEC_OP          reduce using rule 155 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 155 (compound_statement -> { block_item_list } .)
    &               reduce using rule 155 (compound_statement -> { block_item_list } .)
    *               reduce using rule 155 (compound_statement -> { block_item_list } .)
    +               reduce using rule 155 (compound_statement -> { block_item_list } .)
    -               reduce using rule 155 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 155 (compound_statement -> { block_item_list } .)
    !               reduce using rule 155 (compound_statement -> { block_item_list } .)
    ID              reduce using rule 155 (compound_statement -> { block_item_list } .)
    STRING_CONST    reduce using rule 155 (compound_statement -> { block_item_list } .)
    (               reduce using rule 155 (compound_statement -> { block_item_list } .)
    INT_CONST       reduce using rule 155 (compound_statement -> { block_item_list } .)
    CHAR_CONST      reduce using rule 155 (compound_statement -> { block_item_list } .)
    BOOL_CONST      reduce using rule 155 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 155 (compound_statement -> { block_item_list } .)


state 174

    (157) block_item_list -> block_item_list block_item .

    }               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 157 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 157 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 157 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 157 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 157 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 157 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 157 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 157 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 157 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 157 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 157 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 157 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 157 (block_item_list -> block_item_list block_item .)
    STRING_CONST    reduce using rule 157 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 157 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 157 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 157 (block_item_list -> block_item_list block_item .)
    BOOL_CONST      reduce using rule 157 (block_item_list -> block_item_list block_item .)


state 175

    (161) expression_statement -> expression ; .

    }               reduce using rule 161 (expression_statement -> expression ; .)
    {               reduce using rule 161 (expression_statement -> expression ; .)
    ;               reduce using rule 161 (expression_statement -> expression ; .)
    IF              reduce using rule 161 (expression_statement -> expression ; .)
    WHILE           reduce using rule 161 (expression_statement -> expression ; .)
    DO              reduce using rule 161 (expression_statement -> expression ; .)
    FOR             reduce using rule 161 (expression_statement -> expression ; .)
    VOID            reduce using rule 161 (expression_statement -> expression ; .)
    BOOL            reduce using rule 161 (expression_statement -> expression ; .)
    CHAR            reduce using rule 161 (expression_statement -> expression ; .)
    INT             reduce using rule 161 (expression_statement -> expression ; .)
    STRUCT          reduce using rule 161 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 161 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 161 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 161 (expression_statement -> expression ; .)
    &               reduce using rule 161 (expression_statement -> expression ; .)
    *               reduce using rule 161 (expression_statement -> expression ; .)
    +               reduce using rule 161 (expression_statement -> expression ; .)
    -               reduce using rule 161 (expression_statement -> expression ; .)
    ~               reduce using rule 161 (expression_statement -> expression ; .)
    !               reduce using rule 161 (expression_statement -> expression ; .)
    ID              reduce using rule 161 (expression_statement -> expression ; .)
    STRING_CONST    reduce using rule 161 (expression_statement -> expression ; .)
    (               reduce using rule 161 (expression_statement -> expression ; .)
    INT_CONST       reduce using rule 161 (expression_statement -> expression ; .)
    CHAR_CONST      reduce using rule 161 (expression_statement -> expression ; .)
    BOOL_CONST      reduce using rule 161 (expression_statement -> expression ; .)
    )               reduce using rule 161 (expression_statement -> expression ; .)
    ELSE            reduce using rule 161 (expression_statement -> expression ; .)


state 176

    (77) expression -> expression , . assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    assignment_expression          shift and go to state 236
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 177

    (162) selection_statement -> IF ( . expression ) statement
    (163) selection_statement -> IF ( . expression ) statement ELSE statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 237
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 178

    (164) iteration_statement -> WHILE ( . expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 238
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 179

    (165) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 239


state 180

    (166) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (167) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (168) iteration_statement -> FOR ( . declaration expression_statement ) statement
    (169) iteration_statement -> FOR ( . declaration expression_statement expression ) statement
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (79) declaration -> . declaration_specifiers init_declarator_list ;
    (80) declaration -> . declaration_specifiers ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 86
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    STRUCT          shift and go to state 12
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 240
    expression                     shift and go to state 91
    declaration                    shift and go to state 241
    declaration_specifiers         shift and go to state 26
    assignment_expression          shift and go to state 96
    type_specifier                 shift and go to state 6
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    struct_specifier               shift and go to state 11
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 181

    (111) direct_declarator -> direct_declarator [ constant_expression ] .

    [               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    (               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    =               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    {               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    VOID            reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    BOOL            reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    CHAR            reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    INT             reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    STRUCT          reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ;               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ,               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    )               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)
    :               reduce using rule 111 (direct_declarator -> direct_declarator [ constant_expression ] .)


state 182

    (112) direct_declarator -> direct_declarator ( parameter_type_list ) .

    [               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    (               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    =               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOID            reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    BOOL            reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CHAR            reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INT             reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STRUCT          reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    :               reduce using rule 112 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 183

    (113) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    BOOL            reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 113 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 184

    (123) identifier_list -> identifier_list , . ID

    ID              shift and go to state 242


state 185

    (118) parameter_list -> parameter_list , . parameter_declaration
    (119) parameter_declaration -> . declaration_specifiers declarator
    (120) parameter_declaration -> . declaration_specifiers abstract_declarator
    (121) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    parameter_declaration          shift and go to state 243
    declaration_specifiers         shift and go to state 109
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 186

    (119) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 119 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 119 (parameter_declaration -> declaration_specifiers declarator .)


state 187

    (120) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 120 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 120 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 188

    (106) declarator -> pointer . direct_declarator
    (126) abstract_declarator -> pointer .
    (128) abstract_declarator -> pointer . direct_abstract_declarator
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )
    (129) direct_abstract_declarator -> . ( abstract_declarator )
    (130) direct_abstract_declarator -> . [ constant_expression ]
    (131) direct_abstract_declarator -> . [ ]
    (132) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (133) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (134) direct_abstract_declarator -> . ( parameter_type_list )
    (135) direct_abstract_declarator -> . ( )
    (136) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (137) direct_abstract_declarator -> . direct_abstract_declarator ( )

    ,               reduce using rule 126 (abstract_declarator -> pointer .)
    )               reduce using rule 126 (abstract_declarator -> pointer .)
    ID              shift and go to state 21
    (               shift and go to state 190
    [               shift and go to state 191

    direct_declarator              shift and go to state 34
    direct_abstract_declarator     shift and go to state 244

state 189

    (127) abstract_declarator -> direct_abstract_declarator .
    (132) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (133) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]
    (136) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )
    (137) direct_abstract_declarator -> direct_abstract_declarator . ( )

    ,               reduce using rule 127 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 127 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 245
    (               shift and go to state 246


state 190

    (109) direct_declarator -> ( . declarator )
    (129) direct_abstract_declarator -> ( . abstract_declarator )
    (134) direct_abstract_declarator -> ( . parameter_type_list )
    (135) direct_abstract_declarator -> ( . )
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (126) abstract_declarator -> . pointer
    (127) abstract_declarator -> . direct_abstract_declarator
    (128) abstract_declarator -> . pointer direct_abstract_declarator
    (116) parameter_type_list -> . parameter_list
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )
    (129) direct_abstract_declarator -> . ( abstract_declarator )
    (130) direct_abstract_declarator -> . [ constant_expression ]
    (131) direct_abstract_declarator -> . [ ]
    (132) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (133) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (134) direct_abstract_declarator -> . ( parameter_type_list )
    (135) direct_abstract_declarator -> . ( )
    (136) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (137) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (117) parameter_list -> . parameter_declaration
    (118) parameter_list -> . parameter_list , parameter_declaration
    (119) parameter_declaration -> . declaration_specifiers declarator
    (120) parameter_declaration -> . declaration_specifiers abstract_declarator
    (121) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    )               shift and go to state 247
    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 190
    [               shift and go to state 191
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    declarator                     shift and go to state 37
    abstract_declarator            shift and go to state 248
    parameter_type_list            shift and go to state 249
    pointer                        shift and go to state 188
    direct_declarator              shift and go to state 18
    direct_abstract_declarator     shift and go to state 189
    parameter_list                 shift and go to state 106
    parameter_declaration          shift and go to state 108
    declaration_specifiers         shift and go to state 109
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 191

    (130) direct_abstract_declarator -> [ . constant_expression ]
    (131) direct_abstract_declarator -> [ . ]
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    ]               shift and go to state 251
    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    constant_expression            shift and go to state 250
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 51
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 192

    (92) struct_specifier -> STRUCT ID { struct_declaration_list } .

    VOID            reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    BOOL            reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    CHAR            reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    INT             reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    STRUCT          reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    ;               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    *               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    ID              reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    (               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    [               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    ,               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    )               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)
    :               reduce using rule 92 (struct_specifier -> STRUCT ID { struct_declaration_list } .)


state 193

    (97) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 97 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 97 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 97 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 97 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 97 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 97 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 194

    (102) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (103) struct_declarator -> . declarator
    (104) struct_declarator -> . : constant_expression
    (105) struct_declarator -> . declarator : constant_expression
    (106) declarator -> . pointer direct_declarator
    (107) declarator -> . direct_declarator
    (115) pointer -> . *
    (108) direct_declarator -> . ID
    (109) direct_declarator -> . ( declarator )
    (110) direct_declarator -> . direct_declarator [ ]
    (111) direct_declarator -> . direct_declarator [ constant_expression ]
    (112) direct_declarator -> . direct_declarator ( parameter_type_list )
    (113) direct_declarator -> . direct_declarator ( identifier_list )
    (114) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 118
    *               shift and go to state 20
    ID              shift and go to state 21
    (               shift and go to state 22

    struct_declarator              shift and go to state 252
    declarator                     shift and go to state 117
    pointer                        shift and go to state 17
    direct_declarator              shift and go to state 18

state 195

    (105) struct_declarator -> declarator : . constant_expression
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    constant_expression            shift and go to state 253
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 51
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 196

    (104) struct_declarator -> : constant_expression .

    ;               reduce using rule 104 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 104 (struct_declarator -> : constant_expression .)


state 197

    (139) initializer -> { initializer_list } .

    ;               reduce using rule 139 (initializer -> { initializer_list } .)
    ,               reduce using rule 139 (initializer -> { initializer_list } .)
    }               reduce using rule 139 (initializer -> { initializer_list } .)


state 198

    (140) initializer -> { initializer_list , . }
    (142) initializer_list -> initializer_list , . initializer
    (143) initializer_list -> initializer_list , . designation initializer
    (138) initializer -> . assignment_expression
    (139) initializer -> . { initializer_list }
    (140) initializer -> . { initializer_list , }
    (145) designation -> . designator_list =
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (146) designator_list -> . designator
    (147) designator_list -> . designator_list designator
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (148) designator -> . [ constant_expression ]
    (149) designator -> . . ID
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 254
    {               shift and go to state 48
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    [               shift and go to state 125
    .               shift and go to state 126
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    initializer                    shift and go to state 255
    designation                    shift and go to state 256
    assignment_expression          shift and go to state 47
    designator_list                shift and go to state 123
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    designator                     shift and go to state 124
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 199

    (144) initializer_list -> designation initializer .

    }               reduce using rule 144 (initializer_list -> designation initializer .)
    ,               reduce using rule 144 (initializer_list -> designation initializer .)


state 200

    (145) designation -> designator_list = .

    {               reduce using rule 145 (designation -> designator_list = .)
    INC_OP          reduce using rule 145 (designation -> designator_list = .)
    DEC_OP          reduce using rule 145 (designation -> designator_list = .)
    SIZEOF          reduce using rule 145 (designation -> designator_list = .)
    &               reduce using rule 145 (designation -> designator_list = .)
    *               reduce using rule 145 (designation -> designator_list = .)
    +               reduce using rule 145 (designation -> designator_list = .)
    -               reduce using rule 145 (designation -> designator_list = .)
    ~               reduce using rule 145 (designation -> designator_list = .)
    !               reduce using rule 145 (designation -> designator_list = .)
    ID              reduce using rule 145 (designation -> designator_list = .)
    STRING_CONST    reduce using rule 145 (designation -> designator_list = .)
    (               reduce using rule 145 (designation -> designator_list = .)
    INT_CONST       reduce using rule 145 (designation -> designator_list = .)
    CHAR_CONST      reduce using rule 145 (designation -> designator_list = .)
    BOOL_CONST      reduce using rule 145 (designation -> designator_list = .)


state 201

    (147) designator_list -> designator_list designator .

    =               reduce using rule 147 (designator_list -> designator_list designator .)
    [               reduce using rule 147 (designator_list -> designator_list designator .)
    .               reduce using rule 147 (designator_list -> designator_list designator .)


state 202

    (148) designator -> [ constant_expression . ]

    ]               shift and go to state 257


state 203

    (149) designator -> . ID .

    =               reduce using rule 149 (designator -> . ID .)
    [               reduce using rule 149 (designator -> . ID .)
    .               reduce using rule 149 (designator -> . ID .)


state 204

    (64) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ;               reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 64 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 205

    (62) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (77) expression -> expression . , assignment_expression

    :               shift and go to state 258
    ,               shift and go to state 176


state 206

    (60) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (58) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 60 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 156


state 207

    (10) postfix_expression -> postfix_expression [ expression . ]
    (77) expression -> expression . , assignment_expression

    ]               shift and go to state 259
    ,               shift and go to state 176


state 208

    (11) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 11 (postfix_expression -> postfix_expression ( ) .)


state 209

    (12) postfix_expression -> postfix_expression ( argument_expression_list . )
    (18) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 260
    ,               shift and go to state 261


state 210

    (17) argument_expression_list -> assignment_expression .

    )               reduce using rule 17 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 17 (argument_expression_list -> assignment_expression .)


state 211

    (13) postfix_expression -> postfix_expression . ID .

    [               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    (               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    .               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    INC_OP          reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    DEC_OP          reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    =               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    AND_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    XOR_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    OR_ASSIGN       reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    *               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    /               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    %               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    +               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    -               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    <               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    >               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    LE_OP           reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    GE_OP           reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    EQ_OP           reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    NE_OP           reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    &               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    ^               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    |               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    AND_OP          reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    ?               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    OR_OP           reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    ;               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    ,               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    ]               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    }               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    )               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)
    :               reduce using rule 13 (postfix_expression -> postfix_expression . ID .)


state 212

    (14) postfix_expression -> postfix_expression PTR_OP ID .

    [               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    (               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    .               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    =               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    AND_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    XOR_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    OR_ASSIGN       reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    *               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    /               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    %               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    +               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    -               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    <               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    >               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    &               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    ^               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    |               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    AND_OP          reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    ?               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    OR_OP           reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    ;               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    ,               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    ]               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    }               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    )               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)
    :               reduce using rule 14 (postfix_expression -> postfix_expression PTR_OP ID .)


state 213

    (24) unary_expression -> SIZEOF ( type_name . )

    )               shift and go to state 262


state 214

    (4) primary_expression -> ( expression ) .

    [               reduce using rule 4 (primary_expression -> ( expression ) .)
    (               reduce using rule 4 (primary_expression -> ( expression ) .)
    .               reduce using rule 4 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 4 (primary_expression -> ( expression ) .)
    INC_OP          reduce using rule 4 (primary_expression -> ( expression ) .)
    DEC_OP          reduce using rule 4 (primary_expression -> ( expression ) .)
    =               reduce using rule 4 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> ( expression ) .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> ( expression ) .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> ( expression ) .)
    *               reduce using rule 4 (primary_expression -> ( expression ) .)
    /               reduce using rule 4 (primary_expression -> ( expression ) .)
    %               reduce using rule 4 (primary_expression -> ( expression ) .)
    +               reduce using rule 4 (primary_expression -> ( expression ) .)
    -               reduce using rule 4 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 4 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> ( expression ) .)
    <               reduce using rule 4 (primary_expression -> ( expression ) .)
    >               reduce using rule 4 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    &               reduce using rule 4 (primary_expression -> ( expression ) .)
    ^               reduce using rule 4 (primary_expression -> ( expression ) .)
    |               reduce using rule 4 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 4 (primary_expression -> ( expression ) .)
    ?               reduce using rule 4 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 4 (primary_expression -> ( expression ) .)
    ;               reduce using rule 4 (primary_expression -> ( expression ) .)
    ,               reduce using rule 4 (primary_expression -> ( expression ) .)
    ]               reduce using rule 4 (primary_expression -> ( expression ) .)
    }               reduce using rule 4 (primary_expression -> ( expression ) .)
    )               reduce using rule 4 (primary_expression -> ( expression ) .)
    :               reduce using rule 4 (primary_expression -> ( expression ) .)


state 215

    (32) cast_expression -> ( type_name ) . cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    cast_expression                shift and go to state 263
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 216

    (124) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 124 (type_name -> specifier_qualifier_list abstract_declarator .)


state 217

    (126) abstract_declarator -> pointer .
    (128) abstract_declarator -> pointer . direct_abstract_declarator
    (129) direct_abstract_declarator -> . ( abstract_declarator )
    (130) direct_abstract_declarator -> . [ constant_expression ]
    (131) direct_abstract_declarator -> . [ ]
    (132) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (133) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (134) direct_abstract_declarator -> . ( parameter_type_list )
    (135) direct_abstract_declarator -> . ( )
    (136) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (137) direct_abstract_declarator -> . direct_abstract_declarator ( )

    )               reduce using rule 126 (abstract_declarator -> pointer .)
    (               shift and go to state 218
    [               shift and go to state 191

    direct_abstract_declarator     shift and go to state 244

state 218

    (129) direct_abstract_declarator -> ( . abstract_declarator )
    (134) direct_abstract_declarator -> ( . parameter_type_list )
    (135) direct_abstract_declarator -> ( . )
    (126) abstract_declarator -> . pointer
    (127) abstract_declarator -> . direct_abstract_declarator
    (128) abstract_declarator -> . pointer direct_abstract_declarator
    (116) parameter_type_list -> . parameter_list
    (115) pointer -> . *
    (129) direct_abstract_declarator -> . ( abstract_declarator )
    (130) direct_abstract_declarator -> . [ constant_expression ]
    (131) direct_abstract_declarator -> . [ ]
    (132) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (133) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (134) direct_abstract_declarator -> . ( parameter_type_list )
    (135) direct_abstract_declarator -> . ( )
    (136) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (137) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (117) parameter_list -> . parameter_declaration
    (118) parameter_list -> . parameter_list , parameter_declaration
    (119) parameter_declaration -> . declaration_specifiers declarator
    (120) parameter_declaration -> . declaration_specifiers abstract_declarator
    (121) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    )               shift and go to state 247
    *               shift and go to state 20
    (               shift and go to state 218
    [               shift and go to state 191
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    abstract_declarator            shift and go to state 248
    parameter_type_list            shift and go to state 249
    pointer                        shift and go to state 217
    direct_abstract_declarator     shift and go to state 189
    parameter_list                 shift and go to state 106
    parameter_declaration          shift and go to state 108
    declaration_specifiers         shift and go to state 109
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 219

    (58) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (56) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 58 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 157


state 220

    (56) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (54) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 56 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 158


state 221

    (54) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (52) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 54 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 159


state 222

    (52) and_expression -> and_expression & equality_expression .
    (49) equality_expression -> equality_expression . EQ_OP relational_expression
    (50) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 52 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 160
    NE_OP           shift and go to state 161


state 223

    (49) equality_expression -> equality_expression EQ_OP relational_expression .
    (44) relational_expression -> relational_expression . < shift_expression
    (45) relational_expression -> relational_expression . > shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ?               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ;               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ]               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    }               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 49 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 162
    >               shift and go to state 163
    LE_OP           shift and go to state 164
    GE_OP           shift and go to state 165


state 224

    (50) equality_expression -> equality_expression NE_OP relational_expression .
    (44) relational_expression -> relational_expression . < shift_expression
    (45) relational_expression -> relational_expression . > shift_expression
    (46) relational_expression -> relational_expression . LE_OP shift_expression
    (47) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    ?               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    ;               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    ]               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    }               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 50 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 162
    >               shift and go to state 163
    LE_OP           shift and go to state 164
    GE_OP           shift and go to state 165


state 225

    (44) relational_expression -> relational_expression < shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 44 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 166
    RIGHT_OP        shift and go to state 167


state 226

    (45) relational_expression -> relational_expression > shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 45 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 166
    RIGHT_OP        shift and go to state 167


state 227

    (46) relational_expression -> relational_expression LE_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    ?               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    ;               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    ]               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    }               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 46 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 166
    RIGHT_OP        shift and go to state 167


state 228

    (47) relational_expression -> relational_expression GE_OP shift_expression .
    (41) shift_expression -> shift_expression . LEFT_OP additive_expression
    (42) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    ?               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    ;               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    ]               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    }               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 47 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 166
    RIGHT_OP        shift and go to state 167


state 229

    (41) shift_expression -> shift_expression LEFT_OP additive_expression .
    (38) additive_expression -> additive_expression . + multiplicative_expression
    (39) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ?               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ;               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ]               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    }               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 41 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 168
    -               shift and go to state 169


state 230

    (42) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (38) additive_expression -> additive_expression . + multiplicative_expression
    (39) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ?               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ;               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ]               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    }               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 42 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 168
    -               shift and go to state 169


state 231

    (38) additive_expression -> additive_expression + multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . * cast_expression
    (35) multiplicative_expression -> multiplicative_expression . / cast_expression
    (36) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 38 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 170
    /               shift and go to state 171
    %               shift and go to state 172


state 232

    (39) additive_expression -> additive_expression - multiplicative_expression .
    (34) multiplicative_expression -> multiplicative_expression . * cast_expression
    (35) multiplicative_expression -> multiplicative_expression . / cast_expression
    (36) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 39 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 170
    /               shift and go to state 171
    %               shift and go to state 172


state 233

    (34) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LEFT_OP         reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RIGHT_OP        reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 34 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 234

    (35) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LEFT_OP         reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RIGHT_OP        reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 35 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 235

    (36) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LEFT_OP         reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RIGHT_OP        reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 36 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 236

    (77) expression -> expression , assignment_expression .

    ;               reduce using rule 77 (expression -> expression , assignment_expression .)
    ,               reduce using rule 77 (expression -> expression , assignment_expression .)
    )               reduce using rule 77 (expression -> expression , assignment_expression .)
    :               reduce using rule 77 (expression -> expression , assignment_expression .)
    ]               reduce using rule 77 (expression -> expression , assignment_expression .)


state 237

    (162) selection_statement -> IF ( expression . ) statement
    (163) selection_statement -> IF ( expression . ) statement ELSE statement
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 264
    ,               shift and go to state 176


state 238

    (164) iteration_statement -> WHILE ( expression . ) statement
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 265
    ,               shift and go to state 176


state 239

    (165) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 266


state 240

    (166) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (167) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 86
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 267
    expression                     shift and go to state 91
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 241

    (168) iteration_statement -> FOR ( declaration . expression_statement ) statement
    (169) iteration_statement -> FOR ( declaration . expression_statement expression ) statement
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 86
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 268
    expression                     shift and go to state 91
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 242

    (123) identifier_list -> identifier_list , ID .

    )               reduce using rule 123 (identifier_list -> identifier_list , ID .)
    ,               reduce using rule 123 (identifier_list -> identifier_list , ID .)


state 243

    (118) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 118 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 118 (parameter_list -> parameter_list , parameter_declaration .)


state 244

    (128) abstract_declarator -> pointer direct_abstract_declarator .
    (132) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (133) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]
    (136) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )
    (137) direct_abstract_declarator -> direct_abstract_declarator . ( )

    ,               reduce using rule 128 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 128 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 245
    (               shift and go to state 246


state 245

    (132) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (133) direct_abstract_declarator -> direct_abstract_declarator [ . constant_expression ]
    (78) constant_expression -> . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    ]               shift and go to state 269
    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    constant_expression            shift and go to state 270
    conditional_expression         shift and go to state 100
    logical_or_expression          shift and go to state 51
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 246

    (136) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_type_list )
    (137) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (116) parameter_type_list -> . parameter_list
    (117) parameter_list -> . parameter_declaration
    (118) parameter_list -> . parameter_list , parameter_declaration
    (119) parameter_declaration -> . declaration_specifiers declarator
    (120) parameter_declaration -> . declaration_specifiers abstract_declarator
    (121) parameter_declaration -> . declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (87) type_specifier -> . VOID
    (88) type_specifier -> . BOOL
    (89) type_specifier -> . CHAR
    (90) type_specifier -> . INT
    (91) type_specifier -> . struct_specifier
    (92) struct_specifier -> . STRUCT ID { struct_declaration_list }
    (93) struct_specifier -> . STRUCT { struct_declaration_list }
    (94) struct_specifier -> . STRUCT ID

    )               shift and go to state 272
    VOID            shift and go to state 7
    BOOL            shift and go to state 8
    CHAR            shift and go to state 9
    INT             shift and go to state 10
    STRUCT          shift and go to state 12

    parameter_type_list            shift and go to state 271
    parameter_list                 shift and go to state 106
    parameter_declaration          shift and go to state 108
    declaration_specifiers         shift and go to state 109
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 11

state 247

    (135) direct_abstract_declarator -> ( ) .

    [               reduce using rule 135 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 135 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 135 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 135 (direct_abstract_declarator -> ( ) .)


state 248

    (129) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 273


state 249

    (134) direct_abstract_declarator -> ( parameter_type_list . )

    )               shift and go to state 274


state 250

    (130) direct_abstract_declarator -> [ constant_expression . ]

    ]               shift and go to state 275


state 251

    (131) direct_abstract_declarator -> [ ] .

    [               reduce using rule 131 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 131 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 131 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 131 (direct_abstract_declarator -> [ ] .)


state 252

    (102) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 102 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 102 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 253

    (105) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 105 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 105 (struct_declarator -> declarator : constant_expression .)


state 254

    (140) initializer -> { initializer_list , } .

    ;               reduce using rule 140 (initializer -> { initializer_list , } .)
    ,               reduce using rule 140 (initializer -> { initializer_list , } .)
    }               reduce using rule 140 (initializer -> { initializer_list , } .)


state 255

    (142) initializer_list -> initializer_list , initializer .

    }               reduce using rule 142 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 142 (initializer_list -> initializer_list , initializer .)


state 256

    (143) initializer_list -> initializer_list , designation . initializer
    (138) initializer -> . assignment_expression
    (139) initializer -> . { initializer_list }
    (140) initializer -> . { initializer_list , }
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 48
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    initializer                    shift and go to state 276
    assignment_expression          shift and go to state 47
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 257

    (148) designator -> [ constant_expression ] .

    =               reduce using rule 148 (designator -> [ constant_expression ] .)
    [               reduce using rule 148 (designator -> [ constant_expression ] .)
    .               reduce using rule 148 (designator -> [ constant_expression ] .)


state 258

    (62) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST

    (               shift and go to state 102
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    logical_or_expression          shift and go to state 51
    conditional_expression         shift and go to state 277
    logical_and_expression         shift and go to state 59
    inclusive_or_expression        shift and go to state 68
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80
    cast_expression                shift and go to state 56
    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 60
    constant                       shift and go to state 69

state 259

    (10) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    INC_OP          reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    DEC_OP          reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 10 (postfix_expression -> postfix_expression [ expression ] .)


state 260

    (12) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 12 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 261

    (18) argument_expression_list -> argument_expression_list , . assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    assignment_expression          shift and go to state 278
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 262

    (24) unary_expression -> SIZEOF ( type_name ) .

    =               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    MUL_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    DIV_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    MOD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    ADD_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    SUB_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_ASSIGN     reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_ASSIGN    reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    AND_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    XOR_ASSIGN      reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    OR_ASSIGN       reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    *               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_OP         reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_OP        reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    LE_OP           reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    GE_OP           reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_OP           reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    NE_OP           reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 24 (unary_expression -> SIZEOF ( type_name ) .)


state 263

    (32) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_OP         reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_OP        reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    LE_OP           reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    GE_OP           reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    EQ_OP           reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    NE_OP           reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    MUL_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    DIV_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    MOD_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    ADD_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    SUB_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_ASSIGN     reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_ASSIGN    reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    AND_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    XOR_ASSIGN      reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    OR_ASSIGN       reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 32 (cast_expression -> ( type_name ) cast_expression .)


state 264

    (162) selection_statement -> IF ( expression ) . statement
    (163) selection_statement -> IF ( expression ) . statement ELSE statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 91
    statement                      shift and go to state 279
    compound_statement             shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 265

    (164) iteration_statement -> WHILE ( expression ) . statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 91
    statement                      shift and go to state 280
    compound_statement             shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 266

    (165) iteration_statement -> DO statement WHILE ( . expression ) ;
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 281
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 267

    (166) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (167) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 282
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 283
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 268

    (168) iteration_statement -> FOR ( declaration expression_statement . ) statement
    (169) iteration_statement -> FOR ( declaration expression_statement . expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 284
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 285
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 269

    (132) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 132 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 270

    (133) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression . ]

    ]               shift and go to state 286


state 271

    (136) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list . )

    )               shift and go to state 287


state 272

    (137) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 137 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 137 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 137 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 137 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 273

    (129) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 129 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 129 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 129 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 129 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 274

    (134) direct_abstract_declarator -> ( parameter_type_list ) .

    [               reduce using rule 134 (direct_abstract_declarator -> ( parameter_type_list ) .)
    (               reduce using rule 134 (direct_abstract_declarator -> ( parameter_type_list ) .)
    ,               reduce using rule 134 (direct_abstract_declarator -> ( parameter_type_list ) .)
    )               reduce using rule 134 (direct_abstract_declarator -> ( parameter_type_list ) .)


state 275

    (130) direct_abstract_declarator -> [ constant_expression ] .

    [               reduce using rule 130 (direct_abstract_declarator -> [ constant_expression ] .)
    (               reduce using rule 130 (direct_abstract_declarator -> [ constant_expression ] .)
    ,               reduce using rule 130 (direct_abstract_declarator -> [ constant_expression ] .)
    )               reduce using rule 130 (direct_abstract_declarator -> [ constant_expression ] .)


state 276

    (143) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 143 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 143 (initializer_list -> initializer_list , designation initializer .)


state 277

    (62) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 62 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 62 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 62 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 62 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 62 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 62 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 278

    (18) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 18 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 18 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 279

    (162) selection_statement -> IF ( expression ) statement .
    (163) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    ID              reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    STRING_CONST    reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    INT_CONST       reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    CHAR_CONST      reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    BOOL_CONST      reduce using rule 162 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 288

  ! ELSE            [ reduce using rule 162 (selection_statement -> IF ( expression ) statement .) ]


state 280

    (164) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    ID              reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_CONST    reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    INT_CONST       reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR_CONST      reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL_CONST      reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 164 (iteration_statement -> WHILE ( expression ) statement .)


state 281

    (165) iteration_statement -> DO statement WHILE ( expression . ) ;
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 289
    ,               shift and go to state 176


state 282

    (166) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 88
    statement                      shift and go to state 290
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    expression                     shift and go to state 91
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 283

    (167) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 291
    ,               shift and go to state 176


state 284

    (168) iteration_statement -> FOR ( declaration expression_statement ) . statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 88
    statement                      shift and go to state 292
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    expression                     shift and go to state 91
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 285

    (169) iteration_statement -> FOR ( declaration expression_statement expression . ) statement
    (77) expression -> expression . , assignment_expression

    )               shift and go to state 293
    ,               shift and go to state 176


state 286

    (133) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .

    [               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    (               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    ,               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    )               reduce using rule 133 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)


state 287

    (136) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .

    [               reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    (               reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    ,               reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    )               reduce using rule 136 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)


state 288

    (163) selection_statement -> IF ( expression ) statement ELSE . statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression                     shift and go to state 91
    statement                      shift and go to state 294
    compound_statement             shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 289

    (165) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 295


state 290

    (166) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOID            reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL            reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR            reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT             reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRUCT          reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC_OP          reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEC_OP          reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ID              reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_CONST    reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT_CONST       reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR_CONST      reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL_CONST      reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 166 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 291

    (167) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 88
    expression                     shift and go to state 91
    statement                      shift and go to state 296
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 292

    (168) iteration_statement -> FOR ( declaration expression_statement ) statement .

    }               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    {               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ;               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IF              reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    WHILE           reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DO              reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FOR             reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOID            reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL            reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR            reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT             reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRUCT          reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INC_OP          reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEC_OP          reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIZEOF          reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    &               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    *               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    +               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    -               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ~               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    !               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ID              reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRING_CONST    reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    (               reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT_CONST       reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR_CONST      reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL_CONST      reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ELSE            reduce using rule 168 (iteration_statement -> FOR ( declaration expression_statement ) statement .)


state 293

    (169) iteration_statement -> FOR ( declaration expression_statement expression ) . statement
    (150) statement -> . compound_statement
    (151) statement -> . expression_statement
    (152) statement -> . selection_statement
    (153) statement -> . iteration_statement
    (154) compound_statement -> . { }
    (155) compound_statement -> . { block_item_list }
    (160) expression_statement -> . ;
    (161) expression_statement -> . expression ;
    (162) selection_statement -> . IF ( expression ) statement
    (163) selection_statement -> . IF ( expression ) statement ELSE statement
    (164) iteration_statement -> . WHILE ( expression ) statement
    (165) iteration_statement -> . DO statement WHILE ( expression ) ;
    (166) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (167) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (168) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (169) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (76) expression -> . assignment_expression
    (77) expression -> . expression , assignment_expression
    (63) assignment_expression -> . conditional_expression
    (64) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (61) conditional_expression -> . logical_or_expression
    (62) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (19) unary_expression -> . postfix_expression
    (20) unary_expression -> . INC_OP unary_expression
    (21) unary_expression -> . DEC_OP unary_expression
    (22) unary_expression -> . unary_operator cast_expression
    (23) unary_expression -> . SIZEOF unary_expression
    (24) unary_expression -> . SIZEOF ( type_name )
    (59) logical_or_expression -> . logical_and_expression
    (60) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (9) postfix_expression -> . primary_expression
    (10) postfix_expression -> . postfix_expression [ expression ]
    (11) postfix_expression -> . postfix_expression ( )
    (12) postfix_expression -> . postfix_expression ( argument_expression_list )
    (13) postfix_expression -> . postfix_expression . ID
    (14) postfix_expression -> . postfix_expression PTR_OP ID
    (15) postfix_expression -> . postfix_expression INC_OP
    (16) postfix_expression -> . postfix_expression DEC_OP
    (25) unary_operator -> . &
    (26) unary_operator -> . *
    (27) unary_operator -> . +
    (28) unary_operator -> . -
    (29) unary_operator -> . ~
    (30) unary_operator -> . !
    (57) logical_and_expression -> . inclusive_or_expression
    (58) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . ID
    (2) primary_expression -> . constant
    (3) primary_expression -> . STRING_CONST
    (4) primary_expression -> . ( expression )
    (55) inclusive_or_expression -> . exclusive_or_expression
    (56) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (5) constant -> . INT_CONST
    (6) constant -> . CHAR_CONST
    (7) constant -> . STRING_CONST
    (8) constant -> . BOOL_CONST
    (53) exclusive_or_expression -> . and_expression
    (54) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (51) and_expression -> . equality_expression
    (52) and_expression -> . and_expression & equality_expression
    (48) equality_expression -> . relational_expression
    (49) equality_expression -> . equality_expression EQ_OP relational_expression
    (50) equality_expression -> . equality_expression NE_OP relational_expression
    (43) relational_expression -> . shift_expression
    (44) relational_expression -> . relational_expression < shift_expression
    (45) relational_expression -> . relational_expression > shift_expression
    (46) relational_expression -> . relational_expression LE_OP shift_expression
    (47) relational_expression -> . relational_expression GE_OP shift_expression
    (40) shift_expression -> . additive_expression
    (41) shift_expression -> . shift_expression LEFT_OP additive_expression
    (42) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (37) additive_expression -> . multiplicative_expression
    (38) additive_expression -> . additive_expression + multiplicative_expression
    (39) additive_expression -> . additive_expression - multiplicative_expression
    (33) multiplicative_expression -> . cast_expression
    (34) multiplicative_expression -> . multiplicative_expression * cast_expression
    (35) multiplicative_expression -> . multiplicative_expression / cast_expression
    (36) multiplicative_expression -> . multiplicative_expression % cast_expression
    (31) cast_expression -> . unary_expression
    (32) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 31
    ;               shift and go to state 86
    IF              shift and go to state 92
    WHILE           shift and go to state 93
    DO              shift and go to state 94
    FOR             shift and go to state 95
    INC_OP          shift and go to state 53
    DEC_OP          shift and go to state 54
    SIZEOF          shift and go to state 57
    &               shift and go to state 62
    *               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    ~               shift and go to state 66
    !               shift and go to state 67
    ID              shift and go to state 61
    STRING_CONST    shift and go to state 70
    (               shift and go to state 58
    INT_CONST       shift and go to state 72
    CHAR_CONST      shift and go to state 73
    BOOL_CONST      shift and go to state 74

    expression_statement           shift and go to state 88
    expression                     shift and go to state 91
    statement                      shift and go to state 297
    compound_statement             shift and go to state 87
    selection_statement            shift and go to state 89
    iteration_statement            shift and go to state 90
    assignment_expression          shift and go to state 96
    conditional_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    logical_or_expression          shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    cast_expression                shift and go to state 56
    logical_and_expression         shift and go to state 59
    primary_expression             shift and go to state 60
    inclusive_or_expression        shift and go to state 68
    constant                       shift and go to state 69
    exclusive_or_expression        shift and go to state 71
    and_expression                 shift and go to state 75
    equality_expression            shift and go to state 76
    relational_expression          shift and go to state 77
    shift_expression               shift and go to state 78
    additive_expression            shift and go to state 79
    multiplicative_expression      shift and go to state 80

state 294

    (163) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ID              reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_CONST    reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT_CONST       reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR_CONST      reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL_CONST      reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 163 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 295

    (165) iteration_statement -> DO statement WHILE ( expression ) ; .

    }               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BOOL            reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRUCT          reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_OP          reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEC_OP          reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIZEOF          reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    *               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ~               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ID              reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRING_CONST    reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INT_CONST       reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CHAR_CONST      reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BOOL_CONST      reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 165 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 296

    (167) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOID            reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BOOL            reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHAR            reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INT             reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRUCT          reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_OP          reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC_OP          reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIZEOF          reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ID              reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING_CONST    reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INT_CONST       reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHAR_CONST      reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BOOL_CONST      reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 167 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 297

    (169) iteration_statement -> FOR ( declaration expression_statement expression ) statement .

    }               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    {               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ;               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IF              reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    WHILE           reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DO              reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FOR             reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOID            reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BOOL            reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CHAR            reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INT             reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRUCT          reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INC_OP          reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEC_OP          reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIZEOF          reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    &               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    *               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    +               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    -               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ~               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    !               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ID              reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRING_CONST    reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    (               reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INT_CONST       reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CHAR_CONST      reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BOOL_CONST      reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ELSE            reduce using rule 169 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 279 resolved as shiftcs33
WARNING: reduce/reduce conflict in state 70 resolved using rule (primary_expression -> STRING_CONST)
WARNING: rejected rule (constant -> STRING_CONST) in state 70
WARNING: Rule (constant -> STRING_CONST) is never reduced
