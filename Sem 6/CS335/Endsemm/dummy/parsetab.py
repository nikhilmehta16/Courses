
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ASSIGN BEGIN END FLOAT FUNCTION ID INTEGER NUMERIC PROGRAM REAL VAR\n    translation_unit : PROGRAM ID ';' VAR declaration_list BEGIN expression_list END '.'\n    \n    declaration_list : declaration_list declaration \n                        | declaration\n    \n    declaration : variable_list ':' type ';'\n    \n    variable_list : variable_list ',' ID \n                    | ID\n    \n    type : INTEGER \n            | REAL\n    \n    expression_list : expression_list expression \n                    | expression\n    \n    expression : ID ASSIGN additive_expression ';' \n    \n    additive_expression : multiplicative_expression '+' multiplicative_expression \n                | multiplicative_expression \n    \n    multiplicative_expression : unary_expression '*' unary_expression \n                                | unary_expression\n    \n    unary_expression : ID \n                        | NUMERIC\n                        | FLOAT\n    "
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'ID':([2,5,7,8,10,11,13,15,16,21,23,24,32,33,34,],[3,6,6,-3,14,-2,20,14,-10,25,-9,-4,-11,25,25,]),';':([3,17,18,19,25,26,27,28,29,30,35,36,],[4,24,-7,-8,-16,32,-13,-15,-17,-18,-12,-14,]),'VAR':([4,],[5,]),':':([6,9,20,],[-6,12,-5,]),',':([6,9,20,],[-6,13,-5,]),'BEGIN':([7,8,11,24,],[10,-3,-2,-4,]),'INTEGER':([12,],[18,]),'REAL':([12,],[19,]),'ASSIGN':([14,],[21,]),'END':([15,16,23,32,],[22,-10,-9,-11,]),'NUMERIC':([21,33,34,],[29,29,29,]),'FLOAT':([21,33,34,],[30,30,30,]),'.':([22,],[31,]),'*':([25,28,29,30,],[-16,34,-17,-18,]),'+':([25,27,28,29,30,36,],[-16,33,-15,-17,-18,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'declaration_list':([5,],[7,]),'declaration':([5,7,],[8,11,]),'variable_list':([5,7,],[9,9,]),'expression_list':([10,],[15,]),'expression':([10,15,],[16,23,]),'type':([12,],[17,]),'additive_expression':([21,],[26,]),'multiplicative_expression':([21,33,],[27,35,]),'unary_expression':([21,33,34,],[28,28,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> PROGRAM ID ; VAR declaration_list BEGIN expression_list END .','translation_unit',9,'p_translation_unit','parser.py',9),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',14),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',15),
  ('declaration -> variable_list : type ;','declaration',4,'p_declaration','parser.py',20),
  ('variable_list -> variable_list , ID','variable_list',3,'p_variable_list','parser.py',25),
  ('variable_list -> ID','variable_list',1,'p_variable_list','parser.py',26),
  ('type -> INTEGER','type',1,'p_type','parser.py',31),
  ('type -> REAL','type',1,'p_type','parser.py',32),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',37),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',38),
  ('expression -> ID ASSIGN additive_expression ;','expression',4,'p_expression','parser.py',44),
  ('additive_expression -> multiplicative_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',48),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',49),
  ('multiplicative_expression -> unary_expression * unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',54),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',55),
  ('unary_expression -> ID','unary_expression',1,'p_unary_expression','parser.py',60),
  ('unary_expression -> NUMERIC','unary_expression',1,'p_unary_expression','parser.py',61),
  ('unary_expression -> FLOAT','unary_expression',1,'p_unary_expression','parser.py',62),
]
